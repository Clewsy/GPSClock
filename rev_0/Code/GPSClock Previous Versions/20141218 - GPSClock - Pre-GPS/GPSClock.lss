
GPSClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000007e4  00000858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 000000c0  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001be  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000828  00000000  00000000  00000aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004b7  00000000  00000000  00001316  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000c3a  00000000  00000000  000017cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001a0  00000000  00000000  00002408  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000023f  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000028f  00000000  00000000  000027e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  00002a76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

}



int main(void) {
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	df 93       	push	r29
  a4:	cf 93       	push	r28
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	27 97       	sbiw	r28, 0x07	; 7
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61


	initClock();
  b6:	0e 94 8a 02 	call	0x514	; 0x514 <initClock>
	initUSART();							//Initialises the USART for receive/transmit data, 8-bit with 1 stop bit.
  ba:	0e 94 26 01 	call	0x24c	; 0x24c <initUSART>
	printString("\r\n\n\nISO 8601\r\n");	//Initialisation test for USART.
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	0e 94 3d 01 	call	0x27a	; 0x27a <printString>
	initSPI(SPI_POL, SPI_PHA);				//Initialise SPI for RTC - mode 3 (compatible mode 1 or 3) - Polarity=0, Phase=1 and slave select on PB2
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 73 01 	call	0x2e6	; 0x2e6 <initSPI>
	init_RTC();								//Initialise for comms with DS3234 real-time clock.
  ce:	0e 94 91 01 	call	0x322	; 0x322 <init_RTC>
	init_SEV_SEG();							//Initialise for comms with 2x MAX7219 8x7-seg LED drivers.
  d2:	0e 94 67 02 	call	0x4ce	; 0x4ce <init_SEV_SEG>
	SEV_SEG_startupAni();					//Initialisation test for the 16 7-seg LED display.
  d6:	0e 94 07 02 	call	0x40e	; 0x40e <SEV_SEG_startupAni>
	init_buttons();							//Initialise pins connected to two control buttons.
  da:	0e 94 90 02 	call	0x520	; 0x520 <init_buttons>

	sei();									//Global enable interrupts (from avr/interrupt.h)
  de:	78 94       	sei
  e0:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t mode = MODE_NO_DP;				//Initialise "mode" setting.  Modes to be cycled via button press.

	while (1)
	{	

		RTC_getTime(time);	//Refresh time data.  Pass to the function the address of the first element.
  e2:	7e 01       	movw	r14, r28
  e4:	08 94       	sec
  e6:	e1 1c       	adc	r14, r1
  e8:	f1 1c       	adc	r15, r1
		

		//Following block prints the time and date data pulled from the time array in ISO 8601 format via the USART.
		printString("\r");
		printByte(BCD_TO_INT(time[CEN]));
  ea:	0a e0       	ldi	r16, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ec:	80 ed       	ldi	r24, 0xD0	; 208
  ee:	c8 2e       	mov	r12, r24
  f0:	87 e0       	ldi	r24, 0x07	; 7
  f2:	d8 2e       	mov	r13, r24
	uint8_t mode = MODE_NO_DP;				//Initialise "mode" setting.  Modes to be cycled via button press.

	while (1)
	{	

		RTC_getTime(time);	//Refresh time data.  Pass to the function the address of the first element.
  f4:	c7 01       	movw	r24, r14
  f6:	0e 94 a8 01 	call	0x350	; 0x350 <RTC_getTime>
		

		//Following block prints the time and date data pulled from the time array in ISO 8601 format via the USART.
		printString("\r");
  fa:	8f e0       	ldi	r24, 0x0F	; 15
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	0e 94 3d 01 	call	0x27a	; 0x27a <printString>
		printByte(BCD_TO_INT(time[CEN]));
 102:	8f 81       	ldd	r24, Y+7	; 0x07
 104:	28 2f       	mov	r18, r24
 106:	22 95       	swap	r18
 108:	2f 70       	andi	r18, 0x0F	; 15
 10a:	20 9f       	mul	r18, r16
 10c:	90 01       	movw	r18, r0
 10e:	11 24       	eor	r1, r1
 110:	8f 70       	andi	r24, 0x0F	; 15
 112:	82 0f       	add	r24, r18
 114:	0e 94 4e 01 	call	0x29c	; 0x29c <printByte>
		printByte(BCD_TO_INT(time[YEA]));
 118:	8e 81       	ldd	r24, Y+6	; 0x06
 11a:	28 2f       	mov	r18, r24
 11c:	22 95       	swap	r18
 11e:	2f 70       	andi	r18, 0x0F	; 15
 120:	20 9f       	mul	r18, r16
 122:	90 01       	movw	r18, r0
 124:	11 24       	eor	r1, r1
 126:	8f 70       	andi	r24, 0x0F	; 15
 128:	82 0f       	add	r24, r18
 12a:	0e 94 4e 01 	call	0x29c	; 0x29c <printByte>
		printString("-");
 12e:	81 e1       	ldi	r24, 0x11	; 17
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 3d 01 	call	0x27a	; 0x27a <printString>
		printByte(BCD_TO_INT(time[MON]));
 136:	8d 81       	ldd	r24, Y+5	; 0x05
 138:	28 2f       	mov	r18, r24
 13a:	22 95       	swap	r18
 13c:	2f 70       	andi	r18, 0x0F	; 15
 13e:	20 9f       	mul	r18, r16
 140:	90 01       	movw	r18, r0
 142:	11 24       	eor	r1, r1
 144:	8f 70       	andi	r24, 0x0F	; 15
 146:	82 0f       	add	r24, r18
 148:	0e 94 4e 01 	call	0x29c	; 0x29c <printByte>
		printString("-");
 14c:	81 e1       	ldi	r24, 0x11	; 17
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 3d 01 	call	0x27a	; 0x27a <printString>
		printByte(BCD_TO_INT(time[DAT]));
 154:	8c 81       	ldd	r24, Y+4	; 0x04
 156:	28 2f       	mov	r18, r24
 158:	22 95       	swap	r18
 15a:	2f 70       	andi	r18, 0x0F	; 15
 15c:	20 9f       	mul	r18, r16
 15e:	90 01       	movw	r18, r0
 160:	11 24       	eor	r1, r1
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	82 0f       	add	r24, r18
 166:	0e 94 4e 01 	call	0x29c	; 0x29c <printByte>
		printString(" ");
 16a:	83 e1       	ldi	r24, 0x13	; 19
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 3d 01 	call	0x27a	; 0x27a <printString>
		printByte(BCD_TO_INT(time[HOU]));
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	28 2f       	mov	r18, r24
 176:	22 95       	swap	r18
 178:	2f 70       	andi	r18, 0x0F	; 15
 17a:	20 9f       	mul	r18, r16
 17c:	90 01       	movw	r18, r0
 17e:	11 24       	eor	r1, r1
 180:	8f 70       	andi	r24, 0x0F	; 15
 182:	82 0f       	add	r24, r18
 184:	0e 94 4e 01 	call	0x29c	; 0x29c <printByte>
		printString(":");
 188:	85 e1       	ldi	r24, 0x15	; 21
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 3d 01 	call	0x27a	; 0x27a <printString>
		printByte(BCD_TO_INT(time[MIN]));
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	28 2f       	mov	r18, r24
 194:	22 95       	swap	r18
 196:	2f 70       	andi	r18, 0x0F	; 15
 198:	20 9f       	mul	r18, r16
 19a:	90 01       	movw	r18, r0
 19c:	11 24       	eor	r1, r1
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	82 0f       	add	r24, r18
 1a2:	0e 94 4e 01 	call	0x29c	; 0x29c <printByte>
		printString(":");
 1a6:	85 e1       	ldi	r24, 0x15	; 21
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 3d 01 	call	0x27a	; 0x27a <printString>
		printByte(BCD_TO_INT(time[SEC]));
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	28 2f       	mov	r18, r24
 1b2:	22 95       	swap	r18
 1b4:	2f 70       	andi	r18, 0x0F	; 15
 1b6:	20 9f       	mul	r18, r16
 1b8:	90 01       	movw	r18, r0
 1ba:	11 24       	eor	r1, r1
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	82 0f       	add	r24, r18
 1c0:	0e 94 4e 01 	call	0x29c	; 0x29c <printByte>
		printString(" ");
 1c4:	83 e1       	ldi	r24, 0x13	; 19
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 3d 01 	call	0x27a	; 0x27a <printString>


		refresh_display(time, mode);
 1cc:	c7 01       	movw	r24, r14
 1ce:	61 2f       	mov	r22, r17
 1d0:	0e 94 93 02 	call	0x526	; 0x526 <refresh_display>
		
		if(!(BUTTON_PINS & (1 << MODE_BUTTON)))		//If the mode button is pressed
 1d4:	4a 99       	sbic	0x09, 2	; 9
 1d6:	8e cf       	rjmp	.-228    	; 0xf4 <main+0x5e>
 1d8:	c6 01       	movw	r24, r12
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0x144>
		{
			_delay_us(DEBOUNCE_DURATION);					//Brief wait to de-bounce.
			if(!(BUTTON_PINS & (1 << MODE_BUTTON)))	//Re-check mode button is still pressed.
 1de:	4a 99       	sbic	0x09, 2	; 9
 1e0:	89 cf       	rjmp	.-238    	; 0xf4 <main+0x5e>
			{
				mode++;									//Cycle to next mode.
 1e2:	1f 5f       	subi	r17, 0xFF	; 255
				if(mode==NUMBER_OF_MODES)				//If last mode is passed...
 1e4:	14 30       	cpi	r17, 0x04	; 4
 1e6:	49 f4       	brne	.+18     	; 0x1fa <main+0x164>
 1e8:	10 e0       	ldi	r17, 0x00	; 0
 1ea:	07 c0       	rjmp	.+14     	; 0x1fa <main+0x164>
				{
					mode = 0;							//Rollover to first mode.
				}
				while(!(BUTTON_PINS & (1 << MODE_BUTTON)))
				{
					RTC_getTime(time);					//While button is pressed keep refreshing display so mode isn't continuously incremented.
 1ec:	c7 01       	movw	r24, r14
 1ee:	0e 94 a8 01 	call	0x350	; 0x350 <RTC_getTime>
					refresh_display(time, mode);
 1f2:	c7 01       	movw	r24, r14
 1f4:	61 2f       	mov	r22, r17
 1f6:	0e 94 93 02 	call	0x526	; 0x526 <refresh_display>
				mode++;									//Cycle to next mode.
				if(mode==NUMBER_OF_MODES)				//If last mode is passed...
				{
					mode = 0;							//Rollover to first mode.
				}
				while(!(BUTTON_PINS & (1 << MODE_BUTTON)))
 1fa:	4a 99       	sbic	0x09, 2	; 9
 1fc:	7b cf       	rjmp	.-266    	; 0xf4 <main+0x5e>
 1fe:	f6 cf       	rjmp	.-20     	; 0x1ec <main+0x156>

00000200 <__vector_18>:




ISR(USART_RX_vect)	//Interrupt subroutine triggered when the USART receives a byte.
{				
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
	
	transmitByte(receiveByte());	//Echos received byte.
 222:	0e 94 37 01 	call	0x26e	; 0x26e <receiveByte>
 226:	0e 94 3a 01 	call	0x274	; 0x274 <transmitByte>

}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <initUSART>:
#include <USART.h>			//Needed for definitions in this c file. Must be called before util/setbaud.h as contains BAUD definition
#include <util/setbaud.h>	//Used to caluculate Usart Baud Rate Register (High and Low) values as a function of F_CPU defined in the makefile abd BAUD defined

void initUSART(void) {		//Initialise the USART peripheral
							//Utilising USART0
	UBRR0H = UBRRH_VALUE;	//USART Baud Rate Register High -Value defined in util/setbaud.h
 24c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;	//USART Baud Rate Register Low  -Value defined in util/setbaud.h
 250:	83 e3       	ldi	r24, 0x33	; 51
 252:	80 93 c4 00 	sts	0x00C4, r24

	#if USE_2X						//Double-Speed detemined in util/setbaud.h.  Needed is defined BAUD not achieavable without U2X0 
		UCSR0A |= (1 << U2X0);		//UCSR0A = USART 0 Control and Status Register A
	#else							//U2X0 = Double USART 0 Transmission Speed Enable
		UCSR0A &= ~(1 << U2X0);
 256:	e0 ec       	ldi	r30, 0xC0	; 192
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	8d 7f       	andi	r24, 0xFD	; 253
 25e:	80 83       	st	Z, r24
	#endif
	
	UCSR0B = (1 << RXCIE0) | (1 << TXEN0) | (1 << RXEN0);		//UCSR0B = USART 0 Control and Status Register B
 260:	88 e9       	ldi	r24, 0x98	; 152
 262:	80 93 c1 00 	sts	0x00C1, r24
																//RXCIE0 = USART 0 RX Complete Interrupt Enable
																//TXEN0 = Transmit Enable USART0
																//RXEN0 = Receive Enable USART0
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);					//UCSR0C = USART 0 Control and Status Register C
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	80 93 c2 00 	sts	0x00C2, r24
																//UCSZ02:0 = Usart Character Size, Set to 0b011 for 8-bit.
																//(USBS = Usart Stop Bit Select, Stays at 0b0 for 1 stop bit)
}
 26c:	08 95       	ret

0000026e <receiveByte>:


uint8_t receiveByte(void) {	//Sets a variable to whatever was received by the USART

	return UDR0;			//Returns received data.  UDR0 = USART 0 Data Register
 26e:	80 91 c6 00 	lds	r24, 0x00C6
}
 272:	08 95       	ret

00000274 <transmitByte>:


void transmitByte(uint8_t data) {	//Transmits a byte from the USART

	UDR0 = data;					//UDR0 = USART 0 Data Register
 274:	80 93 c6 00 	sts	0x00C6, r24
}
 278:	08 95       	ret

0000027a <printString>:


void printString(const char string[]) {			//Transmits a string of characters.
 27a:	ac 01       	movw	r20, r24
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	07 c0       	rjmp	.+14     	; 0x28e <printString+0x14>

	uint8_t i = 0;								//Counter to increment for every character in the string.
	while ((string[i]) != '\0')	{			//Until null character (end of string).
		while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
 280:	80 91 c0 00 	lds	r24, 0x00C0
 284:	85 ff       	sbrs	r24, 5
 286:	fc cf       	rjmp	.-8      	; 0x280 <printString+0x6>
}


void transmitByte(uint8_t data) {	//Transmits a byte from the USART

	UDR0 = data;					//UDR0 = USART 0 Data Register
 288:	e0 93 c6 00 	sts	0x00C6, r30

	uint8_t i = 0;								//Counter to increment for every character in the string.
	while ((string[i]) != '\0')	{			//Until null character (end of string).
		while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
		transmitByte(string[i]);				//UCSR0A = USART 0 Control and Status Register A
		i++;									//UDRE0 = USART 0 Data Register Empty Flag
 28c:	2f 5f       	subi	r18, 0xFF	; 255


void printString(const char string[]) {			//Transmits a string of characters.

	uint8_t i = 0;								//Counter to increment for every character in the string.
	while ((string[i]) != '\0')	{			//Until null character (end of string).
 28e:	fa 01       	movw	r30, r20
 290:	e2 0f       	add	r30, r18
 292:	f1 1d       	adc	r31, r1
 294:	e0 81       	ld	r30, Z
 296:	ee 23       	and	r30, r30
 298:	99 f7       	brne	.-26     	; 0x280 <printString+0x6>
		while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
		transmitByte(string[i]);				//UCSR0A = USART 0 Control and Status Register A
		i++;									//UDRE0 = USART 0 Data Register Empty Flag
	}
}
 29a:	08 95       	ret

0000029c <printByte>:


void printByte(uint8_t byte) {				//Takes an integer and transmits the characters
 29c:	28 2f       	mov	r18, r24
											//(modified to only print last 2 digits (tens & ones)).
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
 29e:	80 91 c0 00 	lds	r24, 0x00C0
 2a2:	85 ff       	sbrs	r24, 5
 2a4:	fc cf       	rjmp	.-8      	; 0x29e <printByte+0x2>
	transmitByte('0'+ (byte/100));		//Hundreds
 2a6:	82 2f       	mov	r24, r18
 2a8:	64 e6       	ldi	r22, 0x64	; 100
 2aa:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__udivmodqi4>
 2ae:	80 5d       	subi	r24, 0xD0	; 208
}


void transmitByte(uint8_t data) {	//Transmits a byte from the USART

	UDR0 = data;					//UDR0 = USART 0 Data Register
 2b0:	80 93 c6 00 	sts	0x00C6, r24

void printByte(uint8_t byte) {				//Takes an integer and transmits the characters
											//(modified to only print last 2 digits (tens & ones)).
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
 2b4:	80 91 c0 00 	lds	r24, 0x00C0
 2b8:	85 ff       	sbrs	r24, 5
 2ba:	fc cf       	rjmp	.-8      	; 0x2b4 <printByte+0x18>
	transmitByte('0'+ ((byte/10) % 10));	//Tens
 2bc:	82 2f       	mov	r24, r18
 2be:	6a e0       	ldi	r22, 0x0A	; 10
 2c0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__udivmodqi4>
 2c4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__udivmodqi4>
 2c8:	90 5d       	subi	r25, 0xD0	; 208
}


void transmitByte(uint8_t data) {	//Transmits a byte from the USART

	UDR0 = data;					//UDR0 = USART 0 Data Register
 2ca:	90 93 c6 00 	sts	0x00C6, r25
											//(modified to only print last 2 digits (tens & ones)).
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ ((byte/10) % 10));	//Tens
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
 2ce:	80 91 c0 00 	lds	r24, 0x00C0
 2d2:	85 ff       	sbrs	r24, 5
 2d4:	fc cf       	rjmp	.-8      	; 0x2ce <printByte+0x32>
	transmitByte('0'+ (byte % 10));		//Ones
 2d6:	82 2f       	mov	r24, r18
 2d8:	6a e0       	ldi	r22, 0x0A	; 10
 2da:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__udivmodqi4>
 2de:	90 5d       	subi	r25, 0xD0	; 208
}


void transmitByte(uint8_t data) {	//Transmits a byte from the USART

	UDR0 = data;					//UDR0 = USART 0 Data Register
 2e0:	90 93 c6 00 	sts	0x00C6, r25
	transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ ((byte/10) % 10));	//Tens
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ (byte % 10));		//Ones
 2e4:	08 95       	ret

000002e6 <initSPI>:
#include <SPI.h>


void initSPI(uint8_t polarity, uint8_t phase) {	//Will initioalise SPI hardware as master device and frequency/16 then enable.

	SPI_DDR |= (1 << SPI_MOSI);		//MOSI - Output on MOSI
 2e6:	23 9a       	sbi	0x04, 3	; 4
	SPI_PORT |= (1 << SPI_MISO);	 	//MISO - Left set as an input but pullup activated
 2e8:	2c 9a       	sbi	0x05, 4	; 5
	SPI_DDR |= (1 << SPI_SCK);			//SCK - Output on SCK
 2ea:	25 9a       	sbi	0x04, 5	; 4
	SPI_DDR |= (1 << PB2);				//PB2 on AVR is designated SS but any I/O pin can be used, the designation is really for when AVR
 2ec:	22 9a       	sbi	0x04, 2	; 4
										//	SPI acts in slave mode.  HOWEVER must always set PB2 to output even if alternate I/O pin is in
										//	use otherwise AVR defers to other uCUs as per multimaster setup.
	
	//SPCR = SPI Control Register
	SPCR |= (1 << SPR1);	//Div 16, safer for breadboards (Slower SPI frequency to reduce chance of interference)
 2ee:	9c b5       	in	r25, 0x2c	; 44
 2f0:	92 60       	ori	r25, 0x02	; 2
 2f2:	9c bd       	out	0x2c, r25	; 44
	SPCR |= (1 << MSTR);	//Clockmaster
 2f4:	9c b5       	in	r25, 0x2c	; 44
 2f6:	90 61       	ori	r25, 0x10	; 16
 2f8:	9c bd       	out	0x2c, r25	; 44
	SPCR |= (1 << SPE);	//Enable SPI
 2fa:	9c b5       	in	r25, 0x2c	; 44
 2fc:	90 64       	ori	r25, 0x40	; 64
 2fe:	9c bd       	out	0x2c, r25	; 44
	
	//Set Polarity/Phase Mode to 3 for RTC
	SPCR |= (polarity << CPOL);	//CPOL = SPI Clock Polarity, 0 for Clock Idles Low, 1 for clock idles high
 300:	9c b5       	in	r25, 0x2c	; 44
 302:	88 0f       	add	r24, r24
 304:	88 0f       	add	r24, r24
 306:	88 0f       	add	r24, r24
 308:	98 2b       	or	r25, r24
 30a:	9c bd       	out	0x2c, r25	; 44
	SPCR |= (phase << CPHA);		//CPHA = SPI Clock Phase, 1 for Data Sampled on Falling Edge, 0 for Rising Edge
 30c:	8c b5       	in	r24, 0x2c	; 44
 30e:	66 0f       	add	r22, r22
 310:	66 0f       	add	r22, r22
 312:	86 2b       	or	r24, r22
 314:	8c bd       	out	0x2c, r24	; 44
}
 316:	08 95       	ret

00000318 <SPI_tradeByte>:

void SPI_tradeByte(uint8_t byte) {
	
	SPDR = byte; 						//SPI starts sending immediately.  SPDR=SPI Data Register
 318:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF))) {}	//Wait until SPIF (SPI Interrupt Flag) in the SPSR (SPI Status Register) is set indication transfer is complete
 31a:	0d b4       	in	r0, 0x2d	; 45
 31c:	07 fe       	sbrs	r0, 7
 31e:	fd cf       	rjmp	.-6      	; 0x31a <SPI_tradeByte+0x2>
	//SPDR now contains the received byte
}
 320:	08 95       	ret

00000322 <init_RTC>:
#include <DS3234RTC.h>
#include <SPI.h>

void init_RTC (void)
{
	SPI_DDR |= (1 << RTC_SS);	//Set slave select pin on uMC as an output.
 322:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << RTC_SS);	//Start SS off not selected (i.e. high as SS is inverted)
 324:	2a 9a       	sbi	0x05, 2	; 5
}
 326:	08 95       	ret

00000328 <RTC_SPI_writeByte>:
	return(SPDR);				//Return the byte.  SPDR=SPI Data Register
}


void RTC_SPI_writeByte(uint8_t address, uint8_t data) //Writes a byte to the desired address
{
 328:	1f 93       	push	r17
 32a:	16 2f       	mov	r17, r22
	SLAVE_SELECT_RTC;			//Enable the RTC comms
 32c:	2a 98       	cbi	0x05, 2	; 5
	SPI_tradeByte(address);		//Send the address to be written to
 32e:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_tradeByte>
	SPI_tradeByte(data);		//Send the data to be written to address
 332:	81 2f       	mov	r24, r17
 334:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_tradeByte>
	SLAVE_DESELECT_RTC;			//Disable the RTC comms
 338:	2a 9a       	sbi	0x05, 2	; 5
}
 33a:	1f 91       	pop	r17
 33c:	08 95       	ret

0000033e <RTC_SPI_readByte>:
	PORTB |= (1 << RTC_SS);	//Start SS off not selected (i.e. high as SS is inverted)
}

uint8_t RTC_SPI_readByte(uint8_t address) //Reads and returns a byte at the desired address
{
	SLAVE_SELECT_RTC;			//Enable the RTC comms
 33e:	2a 98       	cbi	0x05, 2	; 5
	SPI_tradeByte(address);		//Send the address to be read from
 340:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_tradeByte>
	SPI_tradeByte(0);			//Send dummy byte to load SPDR with byte at address
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_tradeByte>
	SLAVE_DESELECT_RTC;			//Disable the RTC comms
 34a:	2a 9a       	sbi	0x05, 2	; 5
	return(SPDR);				//Return the byte.  SPDR=SPI Data Register
 34c:	8e b5       	in	r24, 0x2e	; 46
}
 34e:	08 95       	ret

00000350 <RTC_getTime>:
	SPI_tradeByte(data);		//Send the data to be written to address
	SLAVE_DESELECT_RTC;			//Disable the RTC comms
}

void RTC_getTime (uint8_t *time)	//Fill in all structure fields from data in the RTC.  All bytes are BCD representations of data.
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	ec 01       	movw	r28, r24
	time[SEC] = (RTC_SPI_readByte(RTC_SECR_RA));								//B7=0, B6-B4=(10 seconds), B3-B0=(seconds)
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 9f 01 	call	0x33e	; 0x33e <RTC_SPI_readByte>
 35c:	88 83       	st	Y, r24
	time[MIN] = (RTC_SPI_readByte(RTC_MINR_RA));								//B7=0, B6-B4=(10 minutes), B3-B0=(minutes)
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 9f 01 	call	0x33e	; 0x33e <RTC_SPI_readByte>
 364:	89 83       	std	Y+1, r24	; 0x01
	time[HOU] = ((RTC_SPI_readByte(RTC_HRR_RA)) & 0b00111111);					//B7-B6=0, B5=(20 hours), B4=(10 hours), B3-B0=(hours)
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	0e 94 9f 01 	call	0x33e	; 0x33e <RTC_SPI_readByte>
 36c:	8f 73       	andi	r24, 0x3F	; 63
 36e:	8a 83       	std	Y+2, r24	; 0x02
	time[DAT] = (RTC_SPI_readByte(RTC_DATER_RA));									//B7-B6=0, B5-B4=(10 date), B3-B0=(date)
 370:	84 e0       	ldi	r24, 0x04	; 4
 372:	0e 94 9f 01 	call	0x33e	; 0x33e <RTC_SPI_readByte>
 376:	8b 83       	std	Y+3, r24	; 0x03
	time[MON] = ((RTC_SPI_readByte(RTC_MCR_RA)) & 0b00011111);					//B7-B5=0, B4=(10 month), B3-B0=(month)
 378:	85 e0       	ldi	r24, 0x05	; 5
 37a:	0e 94 9f 01 	call	0x33e	; 0x33e <RTC_SPI_readByte>
 37e:	8f 71       	andi	r24, 0x1F	; 31
 380:	8c 83       	std	Y+4, r24	; 0x04
	time[YEA] = (RTC_SPI_readByte(RTC_YRR_RA));									//B7-B4=(10 year), B3-B0=(year)
 382:	86 e0       	ldi	r24, 0x06	; 6
 384:	0e 94 9f 01 	call	0x33e	; 0x33e <RTC_SPI_readByte>
 388:	8d 83       	std	Y+5, r24	; 0x05
	if(RTC_SPI_readByte(RTC_MCR_RA) & 0b10000000)									//B7= Century flag. Note, century is either 19 or 20.  I.e. if bit is clear, year is 19XX.
 38a:	85 e0       	ldi	r24, 0x05	; 5
 38c:	0e 94 9f 01 	call	0x33e	; 0x33e <RTC_SPI_readByte>
 390:	87 ff       	sbrs	r24, 7
 392:	02 c0       	rjmp	.+4      	; 0x398 <RTC_getTime+0x48>
	{
		time[CEN] = 0b00100000;	//BCD 20		
 394:	80 e2       	ldi	r24, 0x20	; 32
 396:	01 c0       	rjmp	.+2      	; 0x39a <RTC_getTime+0x4a>
	}
	else
	{

		time[CEN] = 0b00011001; //BCD 19
 398:	89 e1       	ldi	r24, 0x19	; 25
 39a:	8e 83       	std	Y+6, r24	; 0x06
	}
					
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <SEV_SEG_allClear>:
	SEV_SEG_writeByte(SEV_SEG_SHUTDOWN_B, 1);		//Enter normal operation (exit shutdown mode).
    SEV_SEG_writeByte(SEV_SEG_DECODE_MODE_B, 0xFF);	//Set all digits to be set by Code B data input.
}

void SEV_SEG_allClear(void)	//Clears all digits.  Bypasses function "SEV_SEG_writeByte" and clears equivalent digits on both drivers simultaneously (~halves clear time).
{
 3a2:	1f 93       	push	r17
 3a4:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t i;
	for (i=8; i>0; i--)	//Counts down through the digits from digit 7 (8) to digit 0 (1).
	{
		SEV_SEG_LOAD_LOW;						//Drop the level of the LOAD pin
 3a6:	29 98       	cbi	0x05, 1	; 5
		SPI_tradeByte(i);						//Push in digit address i (will be in driver B at latch)
 3a8:	81 2f       	mov	r24, r17
 3aa:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_tradeByte>
		SPI_tradeByte(SEV_SEG_CODEB_BLANK);		//Push in data to clear digit at i (will be in driver B at latch)
 3ae:	8f e0       	ldi	r24, 0x0F	; 15
 3b0:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_tradeByte>
		SPI_tradeByte(i);						//Push in digit address i (will be in driver A at latch)
 3b4:	81 2f       	mov	r24, r17
 3b6:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_tradeByte>
		SPI_tradeByte(SEV_SEG_CODEB_BLANK);		//Push in data to clear digit at i (will be in driver A at latch)
 3ba:	8f e0       	ldi	r24, 0x0F	; 15
 3bc:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_tradeByte>
		SEV_SEG_LOAD_HIGH;						//Raise the level of the LOAD pin - this triggers latching of the sent bytes (last 16 bits of data in driver are latched).
 3c0:	29 9a       	sbi	0x05, 1	; 5
}

void SEV_SEG_allClear(void)	//Clears all digits.  Bypasses function "SEV_SEG_writeByte" and clears equivalent digits on both drivers simultaneously (~halves clear time).
{
	uint8_t i;
	for (i=8; i>0; i--)	//Counts down through the digits from digit 7 (8) to digit 0 (1).
 3c2:	11 50       	subi	r17, 0x01	; 1
 3c4:	81 f7       	brne	.-32     	; 0x3a6 <SEV_SEG_allClear+0x4>
		SPI_tradeByte(SEV_SEG_CODEB_BLANK);		//Push in data to clear digit at i (will be in driver B at latch)
		SPI_tradeByte(i);						//Push in digit address i (will be in driver A at latch)
		SPI_tradeByte(SEV_SEG_CODEB_BLANK);		//Push in data to clear digit at i (will be in driver A at latch)
		SEV_SEG_LOAD_HIGH;						//Raise the level of the LOAD pin - this triggers latching of the sent bytes (last 16 bits of data in driver are latched).
	}
}
 3c6:	1f 91       	pop	r17
 3c8:	08 95       	ret

000003ca <SEV_SEG_writeByte>:
#include <SPI.h>
#include <MAX7219.h>

 
void SEV_SEG_writeByte(uint8_t address, uint8_t data)	//Writes a byte to an address in both of the MAX7219s although one driver will receive data, the other will receive no-op command.
{
 3ca:	0f 93       	push	r16
 3cc:	1f 93       	push	r17
 3ce:	18 2f       	mov	r17, r24
 3d0:	06 2f       	mov	r16, r22
	if(address & 0x80)	//Check driver flag.  If set, address is for driver B (DIG_8 to DIG_15).
 3d2:	87 ff       	sbrs	r24, 7
 3d4:	0b c0       	rjmp	.+22     	; 0x3ec <SEV_SEG_writeByte+0x22>
	{
		SEV_SEG_LOAD_LOW;			//Drop the level of the LOAD pin
 3d6:	29 98       	cbi	0x05, 1	; 5
		SPI_tradeByte(address);		//Send the register address where the data will be stored
 3d8:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_tradeByte>
		SPI_tradeByte(data);		//Send the data to be stored
 3dc:	80 2f       	mov	r24, r16
 3de:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_tradeByte>
		SPI_tradeByte(0);			//Roll no-op data through to push real data out of driver A and into driver B (address byte)
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_tradeByte>
		SPI_tradeByte(0);			//Roll no-op data through to push real data out of driver A and into driver B (data byte)
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0b c0       	rjmp	.+22     	; 0x402 <SEV_SEG_writeByte+0x38>
		SEV_SEG_LOAD_HIGH;			//Raise the level of the LOAD pin - this triggers latching of the sent bytes (last 16 bits of data are latched).
	}
	else				//Not set, therefore address is for driver A (DIG_0 to DIG_7).
	{
		SEV_SEG_LOAD_LOW;			//Drop the level of the LOAD pin
 3ec:	29 98       	cbi	0x05, 1	; 5
		SPI_tradeByte(0);			//Roll no-op data in first for driver B when real data for driver A pushes it through (address byte)
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_tradeByte>
		SPI_tradeByte(0);			//Roll no-op data in first for driver B when real data for driver A pushes it through (data byte)
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_tradeByte>
		SPI_tradeByte(address);		//Send the register address where the data will be stored
 3fa:	81 2f       	mov	r24, r17
 3fc:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_tradeByte>
		SPI_tradeByte(data);		//Send the data to be stored
 400:	80 2f       	mov	r24, r16
 402:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_tradeByte>
		SEV_SEG_LOAD_HIGH;			//Raise the level of the LOAD pin - this triggers latching of the sent bytes (last 16 bits of data are latched).
 406:	29 9a       	sbi	0x05, 1	; 5
	}

}
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	08 95       	ret

0000040e <SEV_SEG_startupAni>:
		SEV_SEG_LOAD_HIGH;						//Raise the level of the LOAD pin - this triggers latching of the sent bytes (last 16 bits of data in driver are latched).
	}
}

void SEV_SEG_startupAni(void)	//Simple startup animation scans the decimal point (DP) right to left then back a few times.
{
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
	SEV_SEG_allClear();			//Start by clearing all digits.
 416:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SEV_SEG_allClear>
 41a:	03 e0       	ldi	r16, 0x03	; 3
 41c:	c8 ec       	ldi	r28, 0xC8	; 200
 41e:	d0 e0       	ldi	r29, 0x00	; 0
 420:	18 e8       	ldi	r17, 0x88	; 136
	while(i)					//The two while loops using j write the DP, pause, clear the DP then move to the next digit from left to right.
	{
		uint8_t j = SEV_SEG_DIGIT_15;		//Loop for driver B (DIG_15 to DIG_8).
		do
		{
			SEV_SEG_writeByte(j,0x8F);		//Clear the digit except turn on the DP
 422:	81 2f       	mov	r24, r17
 424:	6f e8       	ldi	r22, 0x8F	; 143
 426:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
 42a:	84 ef       	ldi	r24, 0xF4	; 244
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	fe 01       	movw	r30, r28
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <SEV_SEG_startupAni+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 434:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 436:	d9 f7       	brne	.-10     	; 0x42e <SEV_SEG_startupAni+0x20>
			_delay_ms(50);
			SEV_SEG_writeByte(j,0x0F);		//Clear the digit inc. the DP
 438:	81 2f       	mov	r24, r17
 43a:	6f e0       	ldi	r22, 0x0F	; 15
 43c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			j--;
 440:	11 50       	subi	r17, 0x01	; 1
		}while(j>=SEV_SEG_DIGIT_8);
 442:	10 38       	cpi	r17, 0x80	; 128
 444:	71 f7       	brne	.-36     	; 0x422 <SEV_SEG_startupAni+0x14>
 446:	18 e0       	ldi	r17, 0x08	; 8
		
		j = SEV_SEG_DIGIT_7;		//Loop for driver A (DIG_7 to DIG_0).
		do
		{
			SEV_SEG_writeByte(j,0x8F);		//Clear the digit except turn on the DP
 448:	81 2f       	mov	r24, r17
 44a:	6f e8       	ldi	r22, 0x8F	; 143
 44c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
 450:	84 ef       	ldi	r24, 0xF4	; 244
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	fe 01       	movw	r30, r28
 456:	31 97       	sbiw	r30, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <SEV_SEG_startupAni+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 45a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 45c:	d9 f7       	brne	.-10     	; 0x454 <SEV_SEG_startupAni+0x46>
			_delay_ms(50);
			SEV_SEG_writeByte(j,0x0F);		//Clear the digit inc. the DP
 45e:	81 2f       	mov	r24, r17
 460:	6f e0       	ldi	r22, 0x0F	; 15
 462:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			j--;
 466:	11 50       	subi	r17, 0x01	; 1
		}while(j>=SEV_SEG_DIGIT_0);
 468:	79 f7       	brne	.-34     	; 0x448 <SEV_SEG_startupAni+0x3a>
		i--;
 46a:	01 50       	subi	r16, 0x01	; 1

void SEV_SEG_startupAni(void)	//Simple startup animation scans the decimal point (DP) right to left then back a few times.
{
	SEV_SEG_allClear();			//Start by clearing all digits.
	uint8_t i = 3;				//Animation repeats 3 times.
	while(i)					//The two while loops using j write the DP, pause, clear the DP then move to the next digit from left to right.
 46c:	c9 f6       	brne	.-78     	; 0x420 <SEV_SEG_startupAni+0x12>
			j--;
		}while(j>=SEV_SEG_DIGIT_0);
		i--;
	}
	//Following block prints "ISO-8601" to the seven-segment displays.
	SEV_SEG_writeByte(SEV_SEG_DIGIT_11, 1);
 46e:	84 e8       	ldi	r24, 0x84	; 132
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_10, 5);
 476:	83 e8       	ldi	r24, 0x83	; 131
 478:	65 e0       	ldi	r22, 0x05	; 5
 47a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_9, 0);
 47e:	82 e8       	ldi	r24, 0x82	; 130
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_8, SEV_SEG_CODEB_DASH);
 486:	81 e8       	ldi	r24, 0x81	; 129
 488:	6a e0       	ldi	r22, 0x0A	; 10
 48a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_7, 8);
 48e:	88 e0       	ldi	r24, 0x08	; 8
 490:	68 e0       	ldi	r22, 0x08	; 8
 492:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_6, 6);
 496:	87 e0       	ldi	r24, 0x07	; 7
 498:	66 e0       	ldi	r22, 0x06	; 6
 49a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_5, 0);
 49e:	86 e0       	ldi	r24, 0x06	; 6
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_4, 1);
 4a6:	85 e0       	ldi	r24, 0x05	; 5
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
 4ae:	80 e2       	ldi	r24, 0x20	; 32
 4b0:	9e e4       	ldi	r25, 0x4E	; 78
 4b2:	28 ec       	ldi	r18, 0xC8	; 200
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	f9 01       	movw	r30, r18
 4b8:	31 97       	sbiw	r30, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <SEV_SEG_startupAni+0xaa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4be:	d9 f7       	brne	.-10     	; 0x4b6 <SEV_SEG_startupAni+0xa8>
		
	_delay_ms(2000);
	SEV_SEG_allClear();			//Clear all 7-seg digits.
 4c0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SEV_SEG_allClear>
}
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	1f 91       	pop	r17
 4ca:	0f 91       	pop	r16
 4cc:	08 95       	ret

000004ce <init_SEV_SEG>:

}

void init_SEV_SEG(void)
{
	SPI_DDR |= (1 << SEV_SEG_LOAD); 				//Set LOAD pin as an output
 4ce:	21 9a       	sbi	0x04, 1	; 4
	PORTB |= (1 << SEV_SEG_LOAD);					//Set LOAD pin to high at start (data latching occurs on LOAD rising edge).
 4d0:	29 9a       	sbi	0x05, 1	; 5
	SEV_SEG_writeByte(SEV_SEG_SCAN_LIMIT_A, 7);		//Set number of digits in the display to 8 (Data=number of digits - 1)
 4d2:	8b e0       	ldi	r24, 0x0B	; 11
 4d4:	67 e0       	ldi	r22, 0x07	; 7
 4d6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_INTENSITY_A, 0x08);	//Set brightness (duty cycle) to about half-way.
 4da:	8a e0       	ldi	r24, 0x0A	; 10
 4dc:	68 e0       	ldi	r22, 0x08	; 8
 4de:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_SHUTDOWN_A, 1);		//Enter normal operation (exit shutdown mode).
 4e2:	8c e0       	ldi	r24, 0x0C	; 12
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
    SEV_SEG_writeByte(SEV_SEG_DECODE_MODE_A, 0xFF);	//Set all digits to be set by Code B data input.
 4ea:	89 e0       	ldi	r24, 0x09	; 9
 4ec:	6f ef       	ldi	r22, 0xFF	; 255
 4ee:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
	
	SEV_SEG_writeByte(SEV_SEG_SCAN_LIMIT_B, 7);		//Set number of digits in the display to 8 (Data=number of digits - 1)
 4f2:	8b e8       	ldi	r24, 0x8B	; 139
 4f4:	67 e0       	ldi	r22, 0x07	; 7
 4f6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_INTENSITY_B, 0x08);	//Set brightness (duty cycle) to about half-way.
 4fa:	8a e8       	ldi	r24, 0x8A	; 138
 4fc:	68 e0       	ldi	r22, 0x08	; 8
 4fe:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_SHUTDOWN_B, 1);		//Enter normal operation (exit shutdown mode).
 502:	8c e8       	ldi	r24, 0x8C	; 140
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
    SEV_SEG_writeByte(SEV_SEG_DECODE_MODE_B, 0xFF);	//Set all digits to be set by Code B data input.
 50a:	89 e8       	ldi	r24, 0x89	; 137
 50c:	6f ef       	ldi	r22, 0xFF	; 255
 50e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
}
 512:	08 95       	ret

00000514 <initClock>:
#include <GPSClock_Support.h>

void initClock(void)
{
	//CLKPR: Clock Prescale Register.  Pre-scale the system clock.  The following setup will disable prescaling so the system clock will be the full 8MHz internal frequency.
	CLKPR = (1 << CLKPCE);		//CLKPCE: Clock Prescaler Change Enable.  Must set to one to enable changes to clock prescaler bits.
 514:	e1 e6       	ldi	r30, 0x61	; 97
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 e8       	ldi	r24, 0x80	; 128
 51a:	80 83       	st	Z, r24
	CLKPR = 0;					//Once CLKPCE is enabled, Clock Prescaler Select Bits can be changed if done within 4 cycles.  In this case, clear all for prescaler value 1 (i.e. 8MHz system).
 51c:	10 82       	st	Z, r1
}
 51e:	08 95       	ret

00000520 <init_buttons>:

void init_buttons(void)
{
	DDR_BUTTONS &= ~(1 << MODE_BUTTON);	//Data Direction Register for port to which buttons are connected.
 520:	52 98       	cbi	0x0a, 2	; 10
											//Clear DDR bits for buttons to make them inputs.  By default all pins are inputs at start-up so this isn't exactly neccessary.
	PORT_BUTTONS |= (1 << MODE_BUTTON);	//'Set' buttons port bit for buttons to activate the internal pull-up resistors.
 522:	5a 9a       	sbi	0x0b, 2	; 11
}
 524:	08 95       	ret

00000526 <refresh_display>:

void refresh_display(uint8_t *time, uint8_t mode)
{
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	ec 01       	movw	r28, r24
	switch(mode)
 52c:	61 30       	cpi	r22, 0x01	; 1
 52e:	09 f4       	brne	.+2      	; 0x532 <refresh_display+0xc>
 530:	4d c0       	rjmp	.+154    	; 0x5cc <refresh_display+0xa6>
 532:	61 30       	cpi	r22, 0x01	; 1
 534:	38 f0       	brcs	.+14     	; 0x544 <refresh_display+0x1e>
 536:	62 30       	cpi	r22, 0x02	; 2
 538:	09 f4       	brne	.+2      	; 0x53c <refresh_display+0x16>
 53a:	a1 c0       	rjmp	.+322    	; 0x67e <refresh_display+0x158>
 53c:	63 30       	cpi	r22, 0x03	; 3
 53e:	09 f0       	breq	.+2      	; 0x542 <refresh_display+0x1c>
 540:	40 c1       	rjmp	.+640    	; 0x7c2 <refresh_display+0x29c>
 542:	e5 c0       	rjmp	.+458    	; 0x70e <refresh_display+0x1e8>
	{
		case MODE_NO_DP:
			SEV_SEG_writeByte(SEV_SEG_DIGIT_15, SEV_SEG_CODEB_BLANK);
 544:	88 e8       	ldi	r24, 0x88	; 136
 546:	6f e0       	ldi	r22, 0x0F	; 15
 548:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_14, ((time[CEN]) >> 4));
 54c:	6e 81       	ldd	r22, Y+6	; 0x06
 54e:	62 95       	swap	r22
 550:	6f 70       	andi	r22, 0x0F	; 15
 552:	87 e8       	ldi	r24, 0x87	; 135
 554:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_13, ((time[CEN]) & 0b00001111));
 558:	6e 81       	ldd	r22, Y+6	; 0x06
 55a:	6f 70       	andi	r22, 0x0F	; 15
 55c:	86 e8       	ldi	r24, 0x86	; 134
 55e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_12, ((time[YEA]) >> 4));
 562:	6d 81       	ldd	r22, Y+5	; 0x05
 564:	62 95       	swap	r22
 566:	6f 70       	andi	r22, 0x0F	; 15
 568:	85 e8       	ldi	r24, 0x85	; 133
 56a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_11, ((time[YEA]) & 0b00001111));
 56e:	6d 81       	ldd	r22, Y+5	; 0x05
 570:	6f 70       	andi	r22, 0x0F	; 15
 572:	84 e8       	ldi	r24, 0x84	; 132
 574:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_10, ((time[MON]) >> 4));
 578:	6c 81       	ldd	r22, Y+4	; 0x04
 57a:	62 95       	swap	r22
 57c:	6f 70       	andi	r22, 0x0F	; 15
 57e:	83 e8       	ldi	r24, 0x83	; 131
 580:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_9, ((time[MON]) & 0b00001111));
 584:	6c 81       	ldd	r22, Y+4	; 0x04
 586:	6f 70       	andi	r22, 0x0F	; 15
 588:	82 e8       	ldi	r24, 0x82	; 130
 58a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_8, ((time[DAT]) >> 4));
 58e:	6b 81       	ldd	r22, Y+3	; 0x03
 590:	62 95       	swap	r22
 592:	6f 70       	andi	r22, 0x0F	; 15
 594:	81 e8       	ldi	r24, 0x81	; 129
 596:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_7, ((time[DAT]) & 0b00001111));
 59a:	6b 81       	ldd	r22, Y+3	; 0x03
 59c:	6f 70       	andi	r22, 0x0F	; 15
 59e:	88 e0       	ldi	r24, 0x08	; 8
 5a0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_6, ((time[HOU]) >> 4));
 5a4:	6a 81       	ldd	r22, Y+2	; 0x02
 5a6:	62 95       	swap	r22
 5a8:	6f 70       	andi	r22, 0x0F	; 15
 5aa:	87 e0       	ldi	r24, 0x07	; 7
 5ac:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_5, ((time[HOU]) & 0b00001111));
 5b0:	6a 81       	ldd	r22, Y+2	; 0x02
 5b2:	6f 70       	andi	r22, 0x0F	; 15
 5b4:	86 e0       	ldi	r24, 0x06	; 6
 5b6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_4, ((time[MIN]) >> 4));
 5ba:	69 81       	ldd	r22, Y+1	; 0x01
 5bc:	62 95       	swap	r22
 5be:	6f 70       	andi	r22, 0x0F	; 15
 5c0:	85 e0       	ldi	r24, 0x05	; 5
 5c2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_3, ((time[MIN]) & 0b00001111));
 5c6:	69 81       	ldd	r22, Y+1	; 0x01
 5c8:	6f 70       	andi	r22, 0x0F	; 15
 5ca:	48 c0       	rjmp	.+144    	; 0x65c <refresh_display+0x136>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_1, ((time[SEC]) & 0b00001111));
			SEV_SEG_writeByte(SEV_SEG_DIGIT_0, SEV_SEG_CODEB_BLANK);
			break;
			
		case MODE_DP:
			SEV_SEG_writeByte(SEV_SEG_DIGIT_15, SEV_SEG_CODEB_BLANK);
 5cc:	88 e8       	ldi	r24, 0x88	; 136
 5ce:	6f e0       	ldi	r22, 0x0F	; 15
 5d0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_14, ((time[CEN]) >> 4));
 5d4:	6e 81       	ldd	r22, Y+6	; 0x06
 5d6:	62 95       	swap	r22
 5d8:	6f 70       	andi	r22, 0x0F	; 15
 5da:	87 e8       	ldi	r24, 0x87	; 135
 5dc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_13, ((time[CEN]) & 0b00001111));
 5e0:	6e 81       	ldd	r22, Y+6	; 0x06
 5e2:	6f 70       	andi	r22, 0x0F	; 15
 5e4:	86 e8       	ldi	r24, 0x86	; 134
 5e6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_12, ((time[YEA]) >> 4));
 5ea:	6d 81       	ldd	r22, Y+5	; 0x05
 5ec:	62 95       	swap	r22
 5ee:	6f 70       	andi	r22, 0x0F	; 15
 5f0:	85 e8       	ldi	r24, 0x85	; 133
 5f2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_11, ((time[YEA]) & 0b00001111) | SEV_SEG_DP);
 5f6:	6d 81       	ldd	r22, Y+5	; 0x05
 5f8:	6f 70       	andi	r22, 0x0F	; 15
 5fa:	60 68       	ori	r22, 0x80	; 128
 5fc:	84 e8       	ldi	r24, 0x84	; 132
 5fe:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_10, ((time[MON]) >> 4));
 602:	6c 81       	ldd	r22, Y+4	; 0x04
 604:	62 95       	swap	r22
 606:	6f 70       	andi	r22, 0x0F	; 15
 608:	83 e8       	ldi	r24, 0x83	; 131
 60a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_9, ((time[MON]) & 0b00001111) | SEV_SEG_DP);
 60e:	6c 81       	ldd	r22, Y+4	; 0x04
 610:	6f 70       	andi	r22, 0x0F	; 15
 612:	60 68       	ori	r22, 0x80	; 128
 614:	82 e8       	ldi	r24, 0x82	; 130
 616:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_8, ((time[DAT]) >> 4));
 61a:	6b 81       	ldd	r22, Y+3	; 0x03
 61c:	62 95       	swap	r22
 61e:	6f 70       	andi	r22, 0x0F	; 15
 620:	81 e8       	ldi	r24, 0x81	; 129
 622:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_7, ((time[DAT]) & 0b00001111) | SEV_SEG_DP);
 626:	6b 81       	ldd	r22, Y+3	; 0x03
 628:	6f 70       	andi	r22, 0x0F	; 15
 62a:	60 68       	ori	r22, 0x80	; 128
 62c:	88 e0       	ldi	r24, 0x08	; 8
 62e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_6, ((time[HOU]) >> 4));
 632:	6a 81       	ldd	r22, Y+2	; 0x02
 634:	62 95       	swap	r22
 636:	6f 70       	andi	r22, 0x0F	; 15
 638:	87 e0       	ldi	r24, 0x07	; 7
 63a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_5, ((time[HOU]) & 0b00001111) | SEV_SEG_DP);
 63e:	6a 81       	ldd	r22, Y+2	; 0x02
 640:	6f 70       	andi	r22, 0x0F	; 15
 642:	60 68       	ori	r22, 0x80	; 128
 644:	86 e0       	ldi	r24, 0x06	; 6
 646:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_4, ((time[MIN]) >> 4));
 64a:	69 81       	ldd	r22, Y+1	; 0x01
 64c:	62 95       	swap	r22
 64e:	6f 70       	andi	r22, 0x0F	; 15
 650:	85 e0       	ldi	r24, 0x05	; 5
 652:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_3, ((time[MIN]) & 0b00001111) | SEV_SEG_DP);
 656:	69 81       	ldd	r22, Y+1	; 0x01
 658:	6f 70       	andi	r22, 0x0F	; 15
 65a:	60 68       	ori	r22, 0x80	; 128
 65c:	84 e0       	ldi	r24, 0x04	; 4
 65e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_2, ((time[SEC]) >> 4));
 662:	68 81       	ld	r22, Y
 664:	62 95       	swap	r22
 666:	6f 70       	andi	r22, 0x0F	; 15
 668:	83 e0       	ldi	r24, 0x03	; 3
 66a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_1, ((time[SEC]) & 0b00001111));
 66e:	68 81       	ld	r22, Y
 670:	6f 70       	andi	r22, 0x0F	; 15
 672:	82 e0       	ldi	r24, 0x02	; 2
 674:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_0, SEV_SEG_CODEB_BLANK);
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	6f e0       	ldi	r22, 0x0F	; 15
 67c:	a0 c0       	rjmp	.+320    	; 0x7be <refresh_display+0x298>
			break;

		case MODE_CENTER_GAP_NO_DP:
			SEV_SEG_writeByte(SEV_SEG_DIGIT_15, ((time[CEN]) >> 4));
 67e:	6e 81       	ldd	r22, Y+6	; 0x06
 680:	62 95       	swap	r22
 682:	6f 70       	andi	r22, 0x0F	; 15
 684:	88 e8       	ldi	r24, 0x88	; 136
 686:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_14, ((time[CEN]) & 0b00001111));
 68a:	6e 81       	ldd	r22, Y+6	; 0x06
 68c:	6f 70       	andi	r22, 0x0F	; 15
 68e:	87 e8       	ldi	r24, 0x87	; 135
 690:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_13, ((time[YEA]) >> 4));
 694:	6d 81       	ldd	r22, Y+5	; 0x05
 696:	62 95       	swap	r22
 698:	6f 70       	andi	r22, 0x0F	; 15
 69a:	86 e8       	ldi	r24, 0x86	; 134
 69c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_12, ((time[YEA]) & 0b00001111));
 6a0:	6d 81       	ldd	r22, Y+5	; 0x05
 6a2:	6f 70       	andi	r22, 0x0F	; 15
 6a4:	85 e8       	ldi	r24, 0x85	; 133
 6a6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_11, ((time[MON]) >> 4));
 6aa:	6c 81       	ldd	r22, Y+4	; 0x04
 6ac:	62 95       	swap	r22
 6ae:	6f 70       	andi	r22, 0x0F	; 15
 6b0:	84 e8       	ldi	r24, 0x84	; 132
 6b2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_10, ((time[MON]) & 0b00001111));
 6b6:	6c 81       	ldd	r22, Y+4	; 0x04
 6b8:	6f 70       	andi	r22, 0x0F	; 15
 6ba:	83 e8       	ldi	r24, 0x83	; 131
 6bc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_9, ((time[DAT]) >> 4));
 6c0:	6b 81       	ldd	r22, Y+3	; 0x03
 6c2:	62 95       	swap	r22
 6c4:	6f 70       	andi	r22, 0x0F	; 15
 6c6:	82 e8       	ldi	r24, 0x82	; 130
 6c8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_8, ((time[DAT]) & 0b00001111));
 6cc:	6b 81       	ldd	r22, Y+3	; 0x03
 6ce:	6f 70       	andi	r22, 0x0F	; 15
 6d0:	81 e8       	ldi	r24, 0x81	; 129
 6d2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_7, SEV_SEG_CODEB_BLANK);
 6d6:	88 e0       	ldi	r24, 0x08	; 8
 6d8:	6f e0       	ldi	r22, 0x0F	; 15
 6da:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_6, SEV_SEG_CODEB_BLANK);
 6de:	87 e0       	ldi	r24, 0x07	; 7
 6e0:	6f e0       	ldi	r22, 0x0F	; 15
 6e2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_5, ((time[HOU]) >> 4));
 6e6:	6a 81       	ldd	r22, Y+2	; 0x02
 6e8:	62 95       	swap	r22
 6ea:	6f 70       	andi	r22, 0x0F	; 15
 6ec:	86 e0       	ldi	r24, 0x06	; 6
 6ee:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_4, ((time[HOU]) & 0b00001111));
 6f2:	6a 81       	ldd	r22, Y+2	; 0x02
 6f4:	6f 70       	andi	r22, 0x0F	; 15
 6f6:	85 e0       	ldi	r24, 0x05	; 5
 6f8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_3, ((time[MIN]) >> 4));
 6fc:	69 81       	ldd	r22, Y+1	; 0x01
 6fe:	62 95       	swap	r22
 700:	6f 70       	andi	r22, 0x0F	; 15
 702:	84 e0       	ldi	r24, 0x04	; 4
 704:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_2, ((time[MIN]) & 0b00001111));
 708:	69 81       	ldd	r22, Y+1	; 0x01
 70a:	6f 70       	andi	r22, 0x0F	; 15
 70c:	4c c0       	rjmp	.+152    	; 0x7a6 <refresh_display+0x280>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_1, ((time[SEC]) >> 4));
			SEV_SEG_writeByte(SEV_SEG_DIGIT_0, ((time[SEC]) & 0b00001111));
			break;
		
		case MODE_CENTER_GAP_DP:
			SEV_SEG_writeByte(SEV_SEG_DIGIT_15, ((time[CEN]) >> 4));
 70e:	6e 81       	ldd	r22, Y+6	; 0x06
 710:	62 95       	swap	r22
 712:	6f 70       	andi	r22, 0x0F	; 15
 714:	88 e8       	ldi	r24, 0x88	; 136
 716:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_14, ((time[CEN]) & 0b00001111));
 71a:	6e 81       	ldd	r22, Y+6	; 0x06
 71c:	6f 70       	andi	r22, 0x0F	; 15
 71e:	87 e8       	ldi	r24, 0x87	; 135
 720:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_13, ((time[YEA]) >> 4));
 724:	6d 81       	ldd	r22, Y+5	; 0x05
 726:	62 95       	swap	r22
 728:	6f 70       	andi	r22, 0x0F	; 15
 72a:	86 e8       	ldi	r24, 0x86	; 134
 72c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_12, ((time[YEA]) & 0b00001111) | SEV_SEG_DP);
 730:	6d 81       	ldd	r22, Y+5	; 0x05
 732:	6f 70       	andi	r22, 0x0F	; 15
 734:	60 68       	ori	r22, 0x80	; 128
 736:	85 e8       	ldi	r24, 0x85	; 133
 738:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_11, ((time[MON]) >> 4));
 73c:	6c 81       	ldd	r22, Y+4	; 0x04
 73e:	62 95       	swap	r22
 740:	6f 70       	andi	r22, 0x0F	; 15
 742:	84 e8       	ldi	r24, 0x84	; 132
 744:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_10, ((time[MON]) & 0b00001111) | SEV_SEG_DP);
 748:	6c 81       	ldd	r22, Y+4	; 0x04
 74a:	6f 70       	andi	r22, 0x0F	; 15
 74c:	60 68       	ori	r22, 0x80	; 128
 74e:	83 e8       	ldi	r24, 0x83	; 131
 750:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_9, ((time[DAT]) >> 4));
 754:	6b 81       	ldd	r22, Y+3	; 0x03
 756:	62 95       	swap	r22
 758:	6f 70       	andi	r22, 0x0F	; 15
 75a:	82 e8       	ldi	r24, 0x82	; 130
 75c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_8, ((time[DAT]) & 0b00001111) | SEV_SEG_DP);
 760:	6b 81       	ldd	r22, Y+3	; 0x03
 762:	6f 70       	andi	r22, 0x0F	; 15
 764:	60 68       	ori	r22, 0x80	; 128
 766:	81 e8       	ldi	r24, 0x81	; 129
 768:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_7, SEV_SEG_CODEB_BLANK);
 76c:	88 e0       	ldi	r24, 0x08	; 8
 76e:	6f e0       	ldi	r22, 0x0F	; 15
 770:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_6, SEV_SEG_CODEB_BLANK);
 774:	87 e0       	ldi	r24, 0x07	; 7
 776:	6f e0       	ldi	r22, 0x0F	; 15
 778:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_5, ((time[HOU]) >> 4));
 77c:	6a 81       	ldd	r22, Y+2	; 0x02
 77e:	62 95       	swap	r22
 780:	6f 70       	andi	r22, 0x0F	; 15
 782:	86 e0       	ldi	r24, 0x06	; 6
 784:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_4, ((time[HOU]) & 0b00001111) | SEV_SEG_DP);
 788:	6a 81       	ldd	r22, Y+2	; 0x02
 78a:	6f 70       	andi	r22, 0x0F	; 15
 78c:	60 68       	ori	r22, 0x80	; 128
 78e:	85 e0       	ldi	r24, 0x05	; 5
 790:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_3, ((time[MIN]) >> 4));
 794:	69 81       	ldd	r22, Y+1	; 0x01
 796:	62 95       	swap	r22
 798:	6f 70       	andi	r22, 0x0F	; 15
 79a:	84 e0       	ldi	r24, 0x04	; 4
 79c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_2, ((time[MIN]) & 0b00001111) | SEV_SEG_DP);
 7a0:	69 81       	ldd	r22, Y+1	; 0x01
 7a2:	6f 70       	andi	r22, 0x0F	; 15
 7a4:	60 68       	ori	r22, 0x80	; 128
 7a6:	83 e0       	ldi	r24, 0x03	; 3
 7a8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_1, ((time[SEC]) >> 4));
 7ac:	68 81       	ld	r22, Y
 7ae:	62 95       	swap	r22
 7b0:	6f 70       	andi	r22, 0x0F	; 15
 7b2:	82 e0       	ldi	r24, 0x02	; 2
 7b4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			SEV_SEG_writeByte(SEV_SEG_DIGIT_0, ((time[SEC]) & 0b00001111));
 7b8:	68 81       	ld	r22, Y
 7ba:	6f 70       	andi	r22, 0x0F	; 15
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SEV_SEG_writeByte>
			break;
	}
}
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	08 95       	ret

000007c8 <__udivmodqi4>:
 7c8:	99 1b       	sub	r25, r25
 7ca:	79 e0       	ldi	r23, 0x09	; 9
 7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <__udivmodqi4_ep>

000007ce <__udivmodqi4_loop>:
 7ce:	99 1f       	adc	r25, r25
 7d0:	96 17       	cp	r25, r22
 7d2:	08 f0       	brcs	.+2      	; 0x7d6 <__udivmodqi4_ep>
 7d4:	96 1b       	sub	r25, r22

000007d6 <__udivmodqi4_ep>:
 7d6:	88 1f       	adc	r24, r24
 7d8:	7a 95       	dec	r23
 7da:	c9 f7       	brne	.-14     	; 0x7ce <__udivmodqi4_loop>
 7dc:	80 95       	com	r24
 7de:	08 95       	ret

000007e0 <_exit>:
 7e0:	f8 94       	cli

000007e2 <__stop_program>:
 7e2:	ff cf       	rjmp	.-2      	; 0x7e2 <__stop_program>
