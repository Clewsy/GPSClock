
GPSClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000064e  000006e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800118  00800118  000006fa  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  000006fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000019f  00000000  00000000  0000079a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000713  00000000  00000000  00000939  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000043d  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a09  00000000  00000000  00001489  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f8  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d8  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 91 01 	jmp	0x322	; 0x322 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  9e:	0c 94 25 03 	jmp	0x64a	; 0x64a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <refresh_display>:
											//time[5]: Month,	1  to 12
											//time[6]: Year,	0  to 99
											//time[7]: Century,	19 to 20

void refresh_display(void)
{
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
	//SEV_SEG_writeByte(SEV_SEG_DIGIT_15, SEV_SEG_CODEB_DASH);
	SEV_SEG_writeByte(SEV_SEG_DIGIT_14, ((time[CEN]) >> 4));
  ae:	8f e1       	ldi	r24, 0x1F	; 31
  b0:	e8 2e       	mov	r14, r24
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	f8 2e       	mov	r15, r24
  b6:	60 91 1f 01 	lds	r22, 0x011F
  ba:	62 95       	swap	r22
  bc:	6f 70       	andi	r22, 0x0F	; 15
  be:	87 e8       	ldi	r24, 0x87	; 135
  c0:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_13, ((time[CEN]) & 0b00001111));
  c4:	60 91 1f 01 	lds	r22, 0x011F
  c8:	6f 70       	andi	r22, 0x0F	; 15
  ca:	86 e8       	ldi	r24, 0x86	; 134
  cc:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_12, ((time[YEA]) >> 4));
  d0:	f7 01       	movw	r30, r14
  d2:	62 91       	ld	r22, -Z
  d4:	8f 01       	movw	r16, r30
  d6:	62 95       	swap	r22
  d8:	6f 70       	andi	r22, 0x0F	; 15
  da:	85 e8       	ldi	r24, 0x85	; 133
  dc:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_11, ((time[YEA]) & 0b00001111) | SEV_SEG_DP);
  e0:	f8 01       	movw	r30, r16
  e2:	60 81       	ld	r22, Z
  e4:	6f 70       	andi	r22, 0x0F	; 15
  e6:	60 68       	ori	r22, 0x80	; 128
  e8:	84 e8       	ldi	r24, 0x84	; 132
  ea:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_10, ((time[MON]) >> 4));
  ee:	87 01       	movw	r16, r14
  f0:	02 50       	subi	r16, 0x02	; 2
  f2:	10 40       	sbci	r17, 0x00	; 0
  f4:	f8 01       	movw	r30, r16
  f6:	60 81       	ld	r22, Z
  f8:	62 95       	swap	r22
  fa:	6f 70       	andi	r22, 0x0F	; 15
  fc:	83 e8       	ldi	r24, 0x83	; 131
  fe:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_9, ((time[MON]) & 0b00001111) | SEV_SEG_DP);
 102:	f8 01       	movw	r30, r16
 104:	60 81       	ld	r22, Z
 106:	6f 70       	andi	r22, 0x0F	; 15
 108:	60 68       	ori	r22, 0x80	; 128
 10a:	82 e8       	ldi	r24, 0x82	; 130
 10c:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_8, ((time[DAT]) >> 4));
 110:	87 01       	movw	r16, r14
 112:	03 50       	subi	r16, 0x03	; 3
 114:	10 40       	sbci	r17, 0x00	; 0
 116:	f8 01       	movw	r30, r16
 118:	60 81       	ld	r22, Z
 11a:	62 95       	swap	r22
 11c:	6f 70       	andi	r22, 0x0F	; 15
 11e:	81 e8       	ldi	r24, 0x81	; 129
 120:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_7, ((time[DAT]) & 0b00001111) | SEV_SEG_DP);
 124:	f8 01       	movw	r30, r16
 126:	60 81       	ld	r22, Z
 128:	6f 70       	andi	r22, 0x0F	; 15
 12a:	60 68       	ori	r22, 0x80	; 128
 12c:	88 e0       	ldi	r24, 0x08	; 8
 12e:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_6, ((time[HOU]) >> 4));
 132:	87 01       	movw	r16, r14
 134:	04 50       	subi	r16, 0x04	; 4
 136:	10 40       	sbci	r17, 0x00	; 0
 138:	f8 01       	movw	r30, r16
 13a:	60 81       	ld	r22, Z
 13c:	62 95       	swap	r22
 13e:	6f 70       	andi	r22, 0x0F	; 15
 140:	87 e0       	ldi	r24, 0x07	; 7
 142:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_5, ((time[HOU]) & 0b00001111) | SEV_SEG_DP);
 146:	f8 01       	movw	r30, r16
 148:	60 81       	ld	r22, Z
 14a:	6f 70       	andi	r22, 0x0F	; 15
 14c:	60 68       	ori	r22, 0x80	; 128
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_4, ((time[MIN]) >> 4));
 154:	87 01       	movw	r16, r14
 156:	05 50       	subi	r16, 0x05	; 5
 158:	10 40       	sbci	r17, 0x00	; 0
 15a:	f8 01       	movw	r30, r16
 15c:	60 81       	ld	r22, Z
 15e:	62 95       	swap	r22
 160:	6f 70       	andi	r22, 0x0F	; 15
 162:	85 e0       	ldi	r24, 0x05	; 5
 164:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_3, ((time[MIN]) & 0b00001111) | SEV_SEG_DP);
 168:	f8 01       	movw	r30, r16
 16a:	60 81       	ld	r22, Z
 16c:	6f 70       	andi	r22, 0x0F	; 15
 16e:	60 68       	ori	r22, 0x80	; 128
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_2, ((time[SEC]) >> 4));
 176:	8a ef       	ldi	r24, 0xFA	; 250
 178:	9f ef       	ldi	r25, 0xFF	; 255
 17a:	e8 0e       	add	r14, r24
 17c:	f9 1e       	adc	r15, r25
 17e:	f7 01       	movw	r30, r14
 180:	60 81       	ld	r22, Z
 182:	62 95       	swap	r22
 184:	6f 70       	andi	r22, 0x0F	; 15
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_1, ((time[SEC]) & 0b00001111));
 18c:	f7 01       	movw	r30, r14
 18e:	60 81       	ld	r22, Z
 190:	6f 70       	andi	r22, 0x0F	; 15
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_0, tick);
 198:	60 91 18 01 	lds	r22, 0x0118
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
}
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	08 95       	ret

000001ac <main>:




int main(void) {
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29

	//CLKPR: Clock Prescale Register.  Pre-scale the system clock.  The following setup will disable prescaling so the system clock will be the full 8MHz internal frequency.
	CLKPR = (1 << CLKPCE);		//CLKPCE: Clock Prescaler Change Enable.  Must set to one to enable changes to clock prescaler bits.
 1b2:	80 e8       	ldi	r24, 0x80	; 128
 1b4:	80 93 61 00 	sts	0x0061, r24
	CLKPR = 0;					//Once CLKPCE is enabled, Clock Prescaler Select Bits can be changed if done within 4 cycles.  In this case, clear all for prescaler value 1 (i.e. 8MHz system).
 1b8:	10 92 61 00 	sts	0x0061, r1
	
	//sei();								//Global enable interrupts (from avr/interrupt.h)
	initUSART();							//Initialises the USART for receive/transmit data, 8-bit with 1 stop bit.
 1bc:	0e 94 b7 01 	call	0x36e	; 0x36e <initUSART>
	printString("\r\n\n\nISO 8601\r\n");	//Initialisation test for USART.
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 ce 01 	call	0x39c	; 0x39c <printString>
	initSPI(SPI_POL, SPI_PHA);				//Initialise SPI for RTC - mode 3 (compatible mode 1 or 3) - Polarity=0, Phase=1 and slave select on PB2
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	0e 94 04 02 	call	0x408	; 0x408 <initSPI>
	init_RTC();								//Initialise for comms with DS3234 real-time clock.
 1d0:	0e 94 22 02 	call	0x444	; 0x444 <init_RTC>
	init_SEV_SEG();							//Initialise for comms with 2x MAX7219 8x7-seg LED drivers.
 1d4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <init_SEV_SEG>
	SEV_SEG_startupAni();					//Initialisation test for the 16 7-seg LED display.
 1d8:	0e 94 98 02 	call	0x530	; 0x530 <SEV_SEG_startupAni>
	SEV_SEG_allClear();						//Clear all 7-seg digits.
 1dc:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SEV_SEG_allClear>
	
	DDRD &= ~(1 << PD2);	//DDRD: Data Direction Register for PORTD.
 1e0:	52 98       	cbi	0x0a, 2	; 10
							//PD2: Clear PD2 to make it an input.  By default all pins are inputs at start-up so this isn't exactly neccessary.
	PORTD |= (1 << PD2);	//'Set' PD2 to activate the internal pull-up resistor.
 1e2:	5a 9a       	sbi	0x0b, 2	; 11
							//ISC01:0: Interrupt Sense Control 0.  Set to 0b10 so INT0 ISR is triggered on a falling edge (when button is pressed/grounded). 
	sei();*/

//PCICR |= (1 << PCIE2);
//PCMSK2 |= (1 << PCINT18);
sei();					//Global enable interrupts (from avr/interrupt.h)
 1e4:	78 94       	sei
		RTC_getTime(&time[0]);	//Refresh time data.  Pass to the function the address of the first element.
		

		//Following block prints the dime and date data pulled from the time array in ISO 8601 format via the USART.
		printString("\r");
		printByte(BCD_TO_INT(time[CEN]));
 1e6:	1a e0       	ldi	r17, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e8:	c0 e2       	ldi	r28, 0x20	; 32
 1ea:	de e4       	ldi	r29, 0x4E	; 78


	while (1)
	{	

		RTC_getTime(&time[0]);	//Refresh time data.  Pass to the function the address of the first element.
 1ec:	89 e1       	ldi	r24, 0x19	; 25
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 39 02 	call	0x472	; 0x472 <RTC_getTime>
		

		//Following block prints the dime and date data pulled from the time array in ISO 8601 format via the USART.
		printString("\r");
 1f4:	8f e0       	ldi	r24, 0x0F	; 15
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 ce 01 	call	0x39c	; 0x39c <printString>
		printByte(BCD_TO_INT(time[CEN]));
 1fc:	80 91 1f 01 	lds	r24, 0x011F
 200:	20 91 1f 01 	lds	r18, 0x011F
 204:	22 95       	swap	r18
 206:	2f 70       	andi	r18, 0x0F	; 15
 208:	21 9f       	mul	r18, r17
 20a:	90 01       	movw	r18, r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 70       	andi	r24, 0x0F	; 15
 210:	82 0f       	add	r24, r18
 212:	0e 94 df 01 	call	0x3be	; 0x3be <printByte>
		printByte(BCD_TO_INT(time[YEA]));
 216:	80 91 1e 01 	lds	r24, 0x011E
 21a:	20 91 1e 01 	lds	r18, 0x011E
 21e:	22 95       	swap	r18
 220:	2f 70       	andi	r18, 0x0F	; 15
 222:	21 9f       	mul	r18, r17
 224:	90 01       	movw	r18, r0
 226:	11 24       	eor	r1, r1
 228:	8f 70       	andi	r24, 0x0F	; 15
 22a:	82 0f       	add	r24, r18
 22c:	0e 94 df 01 	call	0x3be	; 0x3be <printByte>
		printString("-");
 230:	81 e1       	ldi	r24, 0x11	; 17
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 ce 01 	call	0x39c	; 0x39c <printString>
		printByte(BCD_TO_INT(time[MON]));
 238:	80 91 1d 01 	lds	r24, 0x011D
 23c:	20 91 1d 01 	lds	r18, 0x011D
 240:	22 95       	swap	r18
 242:	2f 70       	andi	r18, 0x0F	; 15
 244:	21 9f       	mul	r18, r17
 246:	90 01       	movw	r18, r0
 248:	11 24       	eor	r1, r1
 24a:	8f 70       	andi	r24, 0x0F	; 15
 24c:	82 0f       	add	r24, r18
 24e:	0e 94 df 01 	call	0x3be	; 0x3be <printByte>
		printString("-");
 252:	81 e1       	ldi	r24, 0x11	; 17
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 ce 01 	call	0x39c	; 0x39c <printString>
		printByte(BCD_TO_INT(time[DAT]));
 25a:	80 91 1c 01 	lds	r24, 0x011C
 25e:	20 91 1c 01 	lds	r18, 0x011C
 262:	22 95       	swap	r18
 264:	2f 70       	andi	r18, 0x0F	; 15
 266:	21 9f       	mul	r18, r17
 268:	90 01       	movw	r18, r0
 26a:	11 24       	eor	r1, r1
 26c:	8f 70       	andi	r24, 0x0F	; 15
 26e:	82 0f       	add	r24, r18
 270:	0e 94 df 01 	call	0x3be	; 0x3be <printByte>
		printString(" ");
 274:	83 e1       	ldi	r24, 0x13	; 19
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 ce 01 	call	0x39c	; 0x39c <printString>
		printByte(BCD_TO_INT(time[HOU]));
 27c:	80 91 1b 01 	lds	r24, 0x011B
 280:	20 91 1b 01 	lds	r18, 0x011B
 284:	22 95       	swap	r18
 286:	2f 70       	andi	r18, 0x0F	; 15
 288:	21 9f       	mul	r18, r17
 28a:	90 01       	movw	r18, r0
 28c:	11 24       	eor	r1, r1
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	82 0f       	add	r24, r18
 292:	0e 94 df 01 	call	0x3be	; 0x3be <printByte>
		printString(":");
 296:	85 e1       	ldi	r24, 0x15	; 21
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 ce 01 	call	0x39c	; 0x39c <printString>
		printByte(BCD_TO_INT(time[MIN]));
 29e:	80 91 1a 01 	lds	r24, 0x011A
 2a2:	20 91 1a 01 	lds	r18, 0x011A
 2a6:	22 95       	swap	r18
 2a8:	2f 70       	andi	r18, 0x0F	; 15
 2aa:	21 9f       	mul	r18, r17
 2ac:	90 01       	movw	r18, r0
 2ae:	11 24       	eor	r1, r1
 2b0:	8f 70       	andi	r24, 0x0F	; 15
 2b2:	82 0f       	add	r24, r18
 2b4:	0e 94 df 01 	call	0x3be	; 0x3be <printByte>
		printString(":");
 2b8:	85 e1       	ldi	r24, 0x15	; 21
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 ce 01 	call	0x39c	; 0x39c <printString>
		printByte(BCD_TO_INT(time[SEC]));
 2c0:	80 91 19 01 	lds	r24, 0x0119
 2c4:	20 91 19 01 	lds	r18, 0x0119
 2c8:	22 95       	swap	r18
 2ca:	2f 70       	andi	r18, 0x0F	; 15
 2cc:	21 9f       	mul	r18, r17
 2ce:	90 01       	movw	r18, r0
 2d0:	11 24       	eor	r1, r1
 2d2:	8f 70       	andi	r24, 0x0F	; 15
 2d4:	82 0f       	add	r24, r18
 2d6:	0e 94 df 01 	call	0x3be	; 0x3be <printByte>
		printString(" ");
 2da:	83 e1       	ldi	r24, 0x13	; 19
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 ce 01 	call	0x39c	; 0x39c <printString>
		printByte(tick);
 2e2:	80 91 18 01 	lds	r24, 0x0118
 2e6:	0e 94 df 01 	call	0x3be	; 0x3be <printByte>
		printString(" ");
 2ea:	83 e1       	ldi	r24, 0x13	; 19
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 ce 01 	call	0x39c	; 0x39c <printString>


refresh_display();
 2f2:	0e 94 53 00 	call	0xa6	; 0xa6 <refresh_display>
	
	if(bit_is_clear(PIND, PD2))
 2f6:	4a 99       	sbic	0x09, 2	; 9
 2f8:	79 cf       	rjmp	.-270    	; 0x1ec <main+0x40>
 2fa:	ce 01       	movw	r24, r28
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <main+0x150>
	{
		_delay_ms(10);
		if(bit_is_clear(PIND, PD2))
 300:	4a 99       	sbic	0x09, 2	; 9
 302:	74 cf       	rjmp	.-280    	; 0x1ec <main+0x40>
		{

			tick++;
 304:	80 91 18 01 	lds	r24, 0x0118
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 18 01 	sts	0x0118, r24
 30e:	06 c0       	rjmp	.+12     	; 0x31c <main+0x170>
			while(bit_is_clear(PIND, PD2))
			{
			RTC_getTime(&time[0]);
 310:	89 e1       	ldi	r24, 0x19	; 25
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 39 02 	call	0x472	; 0x472 <RTC_getTime>
				refresh_display();
 318:	0e 94 53 00 	call	0xa6	; 0xa6 <refresh_display>
		_delay_ms(10);
		if(bit_is_clear(PIND, PD2))
		{

			tick++;
			while(bit_is_clear(PIND, PD2))
 31c:	4a 99       	sbic	0x09, 2	; 9
 31e:	66 cf       	rjmp	.-308    	; 0x1ec <main+0x40>
 320:	f7 cf       	rjmp	.-18     	; 0x310 <main+0x164>

00000322 <__vector_18>:
#define SPI_PHA	1	//Define the phase setting when initialising SPI

#define DEBOUNCE_DURATION 1000	//Used in external interrupt routines for buttons at INT0 and INT1.  In microseconts.

ISR(USART_RX_vect)	//Interrupt subroutine triggered when the USART receives a byte.
{				
 322:	1f 92       	push	r1
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	2f 93       	push	r18
 32e:	3f 93       	push	r19
 330:	4f 93       	push	r20
 332:	5f 93       	push	r21
 334:	6f 93       	push	r22
 336:	7f 93       	push	r23
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	af 93       	push	r26
 33e:	bf 93       	push	r27
 340:	ef 93       	push	r30
 342:	ff 93       	push	r31
	
	transmitByte(receiveByte());	//Echos received byte.
 344:	0e 94 c8 01 	call	0x390	; 0x390 <receiveByte>
 348:	0e 94 cb 01 	call	0x396	; 0x396 <transmitByte>

}
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <initUSART>:
#include <USART.h>			//Needed for definitions in this c file. Must be called before util/setbaud.h as contains BAUD definition
#include <util/setbaud.h>	//Used to caluculate Usart Baud Rate Register (High and Low) values as a function of F_CPU defined in the makefile abd BAUD defined

void initUSART(void) {		//Initialise the USART peripheral
							//Utilising USART0
	UBRR0H = UBRRH_VALUE;	//USART Baud Rate Register High -Value defined in util/setbaud.h
 36e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;	//USART Baud Rate Register Low  -Value defined in util/setbaud.h
 372:	83 e3       	ldi	r24, 0x33	; 51
 374:	80 93 c4 00 	sts	0x00C4, r24

	#if USE_2X						//Double-Speed detemined in util/setbaud.h.  Needed is defined BAUD not achieavable without U2X0 
		UCSR0A |= (1 << U2X0);		//UCSR0A = USART 0 Control and Status Register A
	#else							//U2X0 = Double USART 0 Transmission Speed Enable
		UCSR0A &= ~(1 << U2X0);
 378:	e0 ec       	ldi	r30, 0xC0	; 192
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	8d 7f       	andi	r24, 0xFD	; 253
 380:	80 83       	st	Z, r24
	#endif
	
	UCSR0B = (1 << RXCIE0) | (1 << TXEN0) | (1 << RXEN0);		//UCSR0B = USART 0 Control and Status Register B
 382:	88 e9       	ldi	r24, 0x98	; 152
 384:	80 93 c1 00 	sts	0x00C1, r24
																//RXCIE0 = USART 0 RX Complete Interrupt Enable
																//TXEN0 = Transmit Enable USART0
																//RXEN0 = Receive Enable USART0
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);					//UCSR0C = USART 0 Control and Status Register C
 388:	86 e0       	ldi	r24, 0x06	; 6
 38a:	80 93 c2 00 	sts	0x00C2, r24
																//UCSZ02:0 = Usart Character Size, Set to 0b011 for 8-bit.
																//(USBS = Usart Stop Bit Select, Stays at 0b0 for 1 stop bit)
}
 38e:	08 95       	ret

00000390 <receiveByte>:


uint8_t receiveByte(void) {	//Sets a variable to whatever was received by the USART

	return UDR0;			//Returns received data.  UDR0 = USART 0 Data Register
 390:	80 91 c6 00 	lds	r24, 0x00C6
}
 394:	08 95       	ret

00000396 <transmitByte>:


void transmitByte(uint8_t data) {	//Transmits a byte from the USART

	UDR0 = data;					//UDR0 = USART 0 Data Register
 396:	80 93 c6 00 	sts	0x00C6, r24
}
 39a:	08 95       	ret

0000039c <printString>:


void printString(const char string[]) {			//Transmits a string of characters.
 39c:	ac 01       	movw	r20, r24
 39e:	20 e0       	ldi	r18, 0x00	; 0
 3a0:	07 c0       	rjmp	.+14     	; 0x3b0 <printString+0x14>

	uint8_t i = 0;								//Counter to increment for every character in the string.
	while ((string[i]) != '\0')	{			//Until null character (end of string).
		while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
 3a2:	80 91 c0 00 	lds	r24, 0x00C0
 3a6:	85 ff       	sbrs	r24, 5
 3a8:	fc cf       	rjmp	.-8      	; 0x3a2 <printString+0x6>
}


void transmitByte(uint8_t data) {	//Transmits a byte from the USART

	UDR0 = data;					//UDR0 = USART 0 Data Register
 3aa:	e0 93 c6 00 	sts	0x00C6, r30

	uint8_t i = 0;								//Counter to increment for every character in the string.
	while ((string[i]) != '\0')	{			//Until null character (end of string).
		while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
		transmitByte(string[i]);				//UCSR0A = USART 0 Control and Status Register A
		i++;									//UDRE0 = USART 0 Data Register Empty Flag
 3ae:	2f 5f       	subi	r18, 0xFF	; 255


void printString(const char string[]) {			//Transmits a string of characters.

	uint8_t i = 0;								//Counter to increment for every character in the string.
	while ((string[i]) != '\0')	{			//Until null character (end of string).
 3b0:	fa 01       	movw	r30, r20
 3b2:	e2 0f       	add	r30, r18
 3b4:	f1 1d       	adc	r31, r1
 3b6:	e0 81       	ld	r30, Z
 3b8:	ee 23       	and	r30, r30
 3ba:	99 f7       	brne	.-26     	; 0x3a2 <printString+0x6>
		while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
		transmitByte(string[i]);				//UCSR0A = USART 0 Control and Status Register A
		i++;									//UDRE0 = USART 0 Data Register Empty Flag
	}
}
 3bc:	08 95       	ret

000003be <printByte>:


void printByte(uint8_t byte) {				//Takes an integer and transmits the characters
 3be:	28 2f       	mov	r18, r24
											//(modified to only print last 2 digits (tens & ones)).
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
 3c0:	80 91 c0 00 	lds	r24, 0x00C0
 3c4:	85 ff       	sbrs	r24, 5
 3c6:	fc cf       	rjmp	.-8      	; 0x3c0 <printByte+0x2>
	transmitByte('0'+ (byte/100));		//Hundreds
 3c8:	82 2f       	mov	r24, r18
 3ca:	64 e6       	ldi	r22, 0x64	; 100
 3cc:	0e 94 19 03 	call	0x632	; 0x632 <__udivmodqi4>
 3d0:	80 5d       	subi	r24, 0xD0	; 208
}


void transmitByte(uint8_t data) {	//Transmits a byte from the USART

	UDR0 = data;					//UDR0 = USART 0 Data Register
 3d2:	80 93 c6 00 	sts	0x00C6, r24

void printByte(uint8_t byte) {				//Takes an integer and transmits the characters
											//(modified to only print last 2 digits (tens & ones)).
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
 3d6:	80 91 c0 00 	lds	r24, 0x00C0
 3da:	85 ff       	sbrs	r24, 5
 3dc:	fc cf       	rjmp	.-8      	; 0x3d6 <printByte+0x18>
	transmitByte('0'+ ((byte/10) % 10));	//Tens
 3de:	82 2f       	mov	r24, r18
 3e0:	6a e0       	ldi	r22, 0x0A	; 10
 3e2:	0e 94 19 03 	call	0x632	; 0x632 <__udivmodqi4>
 3e6:	0e 94 19 03 	call	0x632	; 0x632 <__udivmodqi4>
 3ea:	90 5d       	subi	r25, 0xD0	; 208
}


void transmitByte(uint8_t data) {	//Transmits a byte from the USART

	UDR0 = data;					//UDR0 = USART 0 Data Register
 3ec:	90 93 c6 00 	sts	0x00C6, r25
											//(modified to only print last 2 digits (tens & ones)).
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ ((byte/10) % 10));	//Tens
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
 3f0:	80 91 c0 00 	lds	r24, 0x00C0
 3f4:	85 ff       	sbrs	r24, 5
 3f6:	fc cf       	rjmp	.-8      	; 0x3f0 <printByte+0x32>
	transmitByte('0'+ (byte % 10));		//Ones
 3f8:	82 2f       	mov	r24, r18
 3fa:	6a e0       	ldi	r22, 0x0A	; 10
 3fc:	0e 94 19 03 	call	0x632	; 0x632 <__udivmodqi4>
 400:	90 5d       	subi	r25, 0xD0	; 208
}


void transmitByte(uint8_t data) {	//Transmits a byte from the USART

	UDR0 = data;					//UDR0 = USART 0 Data Register
 402:	90 93 c6 00 	sts	0x00C6, r25
	transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ ((byte/10) % 10));	//Tens
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ (byte % 10));		//Ones
 406:	08 95       	ret

00000408 <initSPI>:
#include <SPI.h>


void initSPI(uint8_t polarity, uint8_t phase) {	//Will initioalise SPI hardware as master device and frequency/16 then enable.

	SPI_DDR |= (1 << SPI_MOSI);		//MOSI - Output on MOSI
 408:	23 9a       	sbi	0x04, 3	; 4
	SPI_PORT |= (1 << SPI_MISO);	 	//MISO - Left set as an input but pullup activated
 40a:	2c 9a       	sbi	0x05, 4	; 5
	SPI_DDR |= (1 << SPI_SCK);			//SCK - Output on SCK
 40c:	25 9a       	sbi	0x04, 5	; 4
	SPI_DDR |= (1 << PB2);				//PB2 on AVR is designated SS but any I/O pin can be used, the designation is really for when AVR
 40e:	22 9a       	sbi	0x04, 2	; 4
										//	SPI acts in slave mode.  HOWEVER must always set PB2 to output even if alternate I/O pin is in
										//	use otherwise AVR defers to other uCUs as per multimaster setup.
	
	//SPCR = SPI Control Register
	SPCR |= (1 << SPR1);	//Div 16, safer for breadboards (Slower SPI frequency to reduce chance of interference)
 410:	9c b5       	in	r25, 0x2c	; 44
 412:	92 60       	ori	r25, 0x02	; 2
 414:	9c bd       	out	0x2c, r25	; 44
	SPCR |= (1 << MSTR);	//Clockmaster
 416:	9c b5       	in	r25, 0x2c	; 44
 418:	90 61       	ori	r25, 0x10	; 16
 41a:	9c bd       	out	0x2c, r25	; 44
	SPCR |= (1 << SPE);	//Enable SPI
 41c:	9c b5       	in	r25, 0x2c	; 44
 41e:	90 64       	ori	r25, 0x40	; 64
 420:	9c bd       	out	0x2c, r25	; 44
	
	//Set Polarity/Phase Mode to 3 for RTC
	SPCR |= (polarity << CPOL);	//CPOL = SPI Clock Polarity, 0 for Clock Idles Low, 1 for clock idles high
 422:	9c b5       	in	r25, 0x2c	; 44
 424:	88 0f       	add	r24, r24
 426:	88 0f       	add	r24, r24
 428:	88 0f       	add	r24, r24
 42a:	98 2b       	or	r25, r24
 42c:	9c bd       	out	0x2c, r25	; 44
	SPCR |= (phase << CPHA);		//CPHA = SPI Clock Phase, 1 for Data Sampled on Falling Edge, 0 for Rising Edge
 42e:	8c b5       	in	r24, 0x2c	; 44
 430:	66 0f       	add	r22, r22
 432:	66 0f       	add	r22, r22
 434:	86 2b       	or	r24, r22
 436:	8c bd       	out	0x2c, r24	; 44
}
 438:	08 95       	ret

0000043a <SPI_tradeByte>:

void SPI_tradeByte(uint8_t byte) {
	
	SPDR = byte; 						//SPI starts sending immediately.  SPDR=SPI Data Register
 43a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF))) {}	//Wait until SPIF (SPI Interrupt Flag) in the SPSR (SPI Status Register) is set indication transfer is complete
 43c:	0d b4       	in	r0, 0x2d	; 45
 43e:	07 fe       	sbrs	r0, 7
 440:	fd cf       	rjmp	.-6      	; 0x43c <SPI_tradeByte+0x2>
	//SPDR now contains the received byte
}
 442:	08 95       	ret

00000444 <init_RTC>:
#include <DS3234RTC.h>
#include <SPI.h>

void init_RTC (void)
{
	SPI_DDR |= (1 << RTC_SS);	//Set slave select pin on uMC as an output.
 444:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << RTC_SS);	//Start SS off not selected (i.e. high as SS is inverted)
 446:	2a 9a       	sbi	0x05, 2	; 5
}
 448:	08 95       	ret

0000044a <RTC_SPI_writeByte>:
	return(SPDR);				//Return the byte.  SPDR=SPI Data Register
}


void RTC_SPI_writeByte(uint8_t address, uint8_t data) //Writes a byte to the desired address
{
 44a:	1f 93       	push	r17
 44c:	16 2f       	mov	r17, r22
	SLAVE_SELECT_RTC;			//Enable the RTC comms
 44e:	2a 98       	cbi	0x05, 2	; 5
	SPI_tradeByte(address);		//Send the address to be written to
 450:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_tradeByte>
	SPI_tradeByte(data);		//Send the data to be written to address
 454:	81 2f       	mov	r24, r17
 456:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_tradeByte>
	SLAVE_DESELECT_RTC;			//Disable the RTC comms
 45a:	2a 9a       	sbi	0x05, 2	; 5
}
 45c:	1f 91       	pop	r17
 45e:	08 95       	ret

00000460 <RTC_SPI_readByte>:
	PORTB |= (1 << RTC_SS);	//Start SS off not selected (i.e. high as SS is inverted)
}

uint8_t RTC_SPI_readByte(uint8_t address) //Reads and returns a byte at the desired address
{
	SLAVE_SELECT_RTC;			//Enable the RTC comms
 460:	2a 98       	cbi	0x05, 2	; 5
	SPI_tradeByte(address);		//Send the address to be read from
 462:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_tradeByte>
	SPI_tradeByte(0);			//Send dummy byte to load SPDR with byte at address
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_tradeByte>
	SLAVE_DESELECT_RTC;			//Disable the RTC comms
 46c:	2a 9a       	sbi	0x05, 2	; 5
	return(SPDR);				//Return the byte.  SPDR=SPI Data Register
 46e:	8e b5       	in	r24, 0x2e	; 46
}
 470:	08 95       	ret

00000472 <RTC_getTime>:
	SPI_tradeByte(data);		//Send the data to be written to address
	SLAVE_DESELECT_RTC;			//Disable the RTC comms
}

void RTC_getTime (uint8_t *time)	//Fill in all structure fields from data in the RTC.  All bytes are BCD representations of data.
{
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	ec 01       	movw	r28, r24
	time[SEC] = (RTC_SPI_readByte(RTC_SECR_RA));								//B7=0, B6-B4=(10 seconds), B3-B0=(seconds)
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 30 02 	call	0x460	; 0x460 <RTC_SPI_readByte>
 47e:	88 83       	st	Y, r24
	time[MIN] = (RTC_SPI_readByte(RTC_MINR_RA));								//B7=0, B6-B4=(10 minutes), B3-B0=(minutes)
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 30 02 	call	0x460	; 0x460 <RTC_SPI_readByte>
 486:	89 83       	std	Y+1, r24	; 0x01
	time[HOU] = ((RTC_SPI_readByte(RTC_HRR_RA)) & 0b00111111);					//B7-B6=0, B5=(20 hours), B4=(10 hours), B3-B0=(hours)
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	0e 94 30 02 	call	0x460	; 0x460 <RTC_SPI_readByte>
 48e:	8f 73       	andi	r24, 0x3F	; 63
 490:	8a 83       	std	Y+2, r24	; 0x02
	time[DAT] = (RTC_SPI_readByte(RTC_DATER_RA));									//B7-B6=0, B5-B4=(10 date), B3-B0=(date)
 492:	84 e0       	ldi	r24, 0x04	; 4
 494:	0e 94 30 02 	call	0x460	; 0x460 <RTC_SPI_readByte>
 498:	8b 83       	std	Y+3, r24	; 0x03
	time[MON] = ((RTC_SPI_readByte(RTC_MCR_RA)) & 0b00011111);					//B7-B5=0, B4=(10 month), B3-B0=(month)
 49a:	85 e0       	ldi	r24, 0x05	; 5
 49c:	0e 94 30 02 	call	0x460	; 0x460 <RTC_SPI_readByte>
 4a0:	8f 71       	andi	r24, 0x1F	; 31
 4a2:	8c 83       	std	Y+4, r24	; 0x04
	time[YEA] = (RTC_SPI_readByte(RTC_YRR_RA));									//B7-B4=(10 year), B3-B0=(year)
 4a4:	86 e0       	ldi	r24, 0x06	; 6
 4a6:	0e 94 30 02 	call	0x460	; 0x460 <RTC_SPI_readByte>
 4aa:	8d 83       	std	Y+5, r24	; 0x05
	if(RTC_SPI_readByte(RTC_MCR_RA) & 0b10000000)									//B7= Century flag. Note, century is either 19 or 20.  I.e. if bit is clear, year is 19XX.
 4ac:	85 e0       	ldi	r24, 0x05	; 5
 4ae:	0e 94 30 02 	call	0x460	; 0x460 <RTC_SPI_readByte>
 4b2:	87 ff       	sbrs	r24, 7
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <RTC_getTime+0x48>
	{
		time[CEN] = 0b00100000;	//BCD 20		
 4b6:	80 e2       	ldi	r24, 0x20	; 32
 4b8:	01 c0       	rjmp	.+2      	; 0x4bc <RTC_getTime+0x4a>
	}
	else
	{

		time[CEN] = 0b00011001; //BCD 19
 4ba:	89 e1       	ldi	r24, 0x19	; 25
 4bc:	8e 83       	std	Y+6, r24	; 0x06
	}
					
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <SEV_SEG_allClear>:
	SEV_SEG_writeByte(SEV_SEG_SHUTDOWN_B, 1);		//Enter normal operation (exit shutdown mode).
    SEV_SEG_writeByte(SEV_SEG_DECODE_MODE_B, 0xFF);	//Set all digits to be set by Code B data input.
}

void SEV_SEG_allClear(void)	//Clears all digits.  Bypasses function "SEV_SEG_writeByte" and clears equivalent digits on both drivers simultaneously (~halves clear time).
{
 4c4:	1f 93       	push	r17
 4c6:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t i;
	for (i=8; i>0; i--)	//Counts down through the digits from digit 7 (8) to digit 0 (1).
	{
		SEV_SEG_LOAD_LOW;						//Drop the level of the LOAD pin
 4c8:	29 98       	cbi	0x05, 1	; 5
		SPI_tradeByte(i);						//Push in digit address i (will be in driver B at latch)
 4ca:	81 2f       	mov	r24, r17
 4cc:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_tradeByte>
		SPI_tradeByte(SEV_SEG_CODEB_BLANK);		//Push in data to clear digit at i (will be in driver B at latch)
 4d0:	8f e0       	ldi	r24, 0x0F	; 15
 4d2:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_tradeByte>
		SPI_tradeByte(i);						//Push in digit address i (will be in driver A at latch)
 4d6:	81 2f       	mov	r24, r17
 4d8:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_tradeByte>
		SPI_tradeByte(SEV_SEG_CODEB_BLANK);		//Push in data to clear digit at i (will be in driver A at latch)
 4dc:	8f e0       	ldi	r24, 0x0F	; 15
 4de:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_tradeByte>
		SEV_SEG_LOAD_HIGH;						//Raise the level of the LOAD pin - this triggers latching of the sent bytes (last 16 bits of data in driver are latched).
 4e2:	29 9a       	sbi	0x05, 1	; 5
}

void SEV_SEG_allClear(void)	//Clears all digits.  Bypasses function "SEV_SEG_writeByte" and clears equivalent digits on both drivers simultaneously (~halves clear time).
{
	uint8_t i;
	for (i=8; i>0; i--)	//Counts down through the digits from digit 7 (8) to digit 0 (1).
 4e4:	11 50       	subi	r17, 0x01	; 1
 4e6:	81 f7       	brne	.-32     	; 0x4c8 <SEV_SEG_allClear+0x4>
		SPI_tradeByte(SEV_SEG_CODEB_BLANK);		//Push in data to clear digit at i (will be in driver B at latch)
		SPI_tradeByte(i);						//Push in digit address i (will be in driver A at latch)
		SPI_tradeByte(SEV_SEG_CODEB_BLANK);		//Push in data to clear digit at i (will be in driver A at latch)
		SEV_SEG_LOAD_HIGH;						//Raise the level of the LOAD pin - this triggers latching of the sent bytes (last 16 bits of data in driver are latched).
	}
}
 4e8:	1f 91       	pop	r17
 4ea:	08 95       	ret

000004ec <SEV_SEG_writeByte>:
#include <SPI.h>
#include <MAX7219.h>

 
void SEV_SEG_writeByte(uint8_t address, uint8_t data)	//Writes a byte to an address in both of the MAX7219s although one driver will receive data, the other will receive no-op command.
{
 4ec:	0f 93       	push	r16
 4ee:	1f 93       	push	r17
 4f0:	18 2f       	mov	r17, r24
 4f2:	06 2f       	mov	r16, r22
	if(address & 0x80)	//Check driver flag.  If set, address is for driver B (DIG_8 to DIG_15).
 4f4:	87 ff       	sbrs	r24, 7
 4f6:	0b c0       	rjmp	.+22     	; 0x50e <SEV_SEG_writeByte+0x22>
	{
		SEV_SEG_LOAD_LOW;			//Drop the level of the LOAD pin
 4f8:	29 98       	cbi	0x05, 1	; 5
		SPI_tradeByte(address);		//Send the register address where the data will be stored
 4fa:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_tradeByte>
		SPI_tradeByte(data);		//Send the data to be stored
 4fe:	80 2f       	mov	r24, r16
 500:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_tradeByte>
		SPI_tradeByte(0);			//Roll no-op data through to push real data out of driver A and into driver B (address byte)
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_tradeByte>
		SPI_tradeByte(0);			//Roll no-op data through to push real data out of driver A and into driver B (data byte)
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	0b c0       	rjmp	.+22     	; 0x524 <SEV_SEG_writeByte+0x38>
		SEV_SEG_LOAD_HIGH;			//Raise the level of the LOAD pin - this triggers latching of the sent bytes (last 16 bits of data are latched).
	}
	else				//Not set, therefore address is for driver A (DIG_0 to DIG_7).
	{
		SEV_SEG_LOAD_LOW;			//Drop the level of the LOAD pin
 50e:	29 98       	cbi	0x05, 1	; 5
		SPI_tradeByte(0);			//Roll no-op data in first for driver B when real data for driver A pushes it through (address byte)
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_tradeByte>
		SPI_tradeByte(0);			//Roll no-op data in first for driver B when real data for driver A pushes it through (data byte)
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_tradeByte>
		SPI_tradeByte(address);		//Send the register address where the data will be stored
 51c:	81 2f       	mov	r24, r17
 51e:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_tradeByte>
		SPI_tradeByte(data);		//Send the data to be stored
 522:	80 2f       	mov	r24, r16
 524:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_tradeByte>
		SEV_SEG_LOAD_HIGH;			//Raise the level of the LOAD pin - this triggers latching of the sent bytes (last 16 bits of data are latched).
 528:	29 9a       	sbi	0x05, 1	; 5
	}

}
 52a:	1f 91       	pop	r17
 52c:	0f 91       	pop	r16
 52e:	08 95       	ret

00000530 <SEV_SEG_startupAni>:
		SEV_SEG_LOAD_HIGH;						//Raise the level of the LOAD pin - this triggers latching of the sent bytes (last 16 bits of data in driver are latched).
	}
}

void SEV_SEG_startupAni(void)	//Simple startup animation scans the decimal point (DP) right to left then back a few times.
{
 530:	0f 93       	push	r16
 532:	1f 93       	push	r17
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
	SEV_SEG_allClear();			//Start by clearing all digits.
 538:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SEV_SEG_allClear>
 53c:	03 e0       	ldi	r16, 0x03	; 3
 53e:	c8 ec       	ldi	r28, 0xC8	; 200
 540:	d0 e0       	ldi	r29, 0x00	; 0
 542:	18 e8       	ldi	r17, 0x88	; 136
	while(i)					//The two while loops using j write the DP, pause, clear the DP then move to the next digit from left to right.
	{
		uint8_t j = SEV_SEG_DIGIT_15;		//Loop for driver B (DIG_15 to DIG_8).
		do
		{
			SEV_SEG_writeByte(j,0x8F);		//Clear the digit except turn on the DP
 544:	81 2f       	mov	r24, r17
 546:	6f e8       	ldi	r22, 0x8F	; 143
 548:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
 54c:	84 ef       	ldi	r24, 0xF4	; 244
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	fe 01       	movw	r30, r28
 552:	31 97       	sbiw	r30, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <SEV_SEG_startupAni+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 556:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 558:	d9 f7       	brne	.-10     	; 0x550 <SEV_SEG_startupAni+0x20>
			_delay_ms(50);
			SEV_SEG_writeByte(j,0x0F);		//Clear the digit inc. the DP
 55a:	81 2f       	mov	r24, r17
 55c:	6f e0       	ldi	r22, 0x0F	; 15
 55e:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
			j--;
 562:	11 50       	subi	r17, 0x01	; 1
		}while(j>=SEV_SEG_DIGIT_8);
 564:	10 38       	cpi	r17, 0x80	; 128
 566:	71 f7       	brne	.-36     	; 0x544 <SEV_SEG_startupAni+0x14>
 568:	18 e0       	ldi	r17, 0x08	; 8
		
		j = SEV_SEG_DIGIT_7;		//Loop for driver A (DIG_7 to DIG_0).
		do
		{
			SEV_SEG_writeByte(j,0x8F);		//Clear the digit except turn on the DP
 56a:	81 2f       	mov	r24, r17
 56c:	6f e8       	ldi	r22, 0x8F	; 143
 56e:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
 572:	84 ef       	ldi	r24, 0xF4	; 244
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	fe 01       	movw	r30, r28
 578:	31 97       	sbiw	r30, 0x01	; 1
 57a:	f1 f7       	brne	.-4      	; 0x578 <SEV_SEG_startupAni+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 57c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 57e:	d9 f7       	brne	.-10     	; 0x576 <SEV_SEG_startupAni+0x46>
			_delay_ms(50);
			SEV_SEG_writeByte(j,0x0F);		//Clear the digit inc. the DP
 580:	81 2f       	mov	r24, r17
 582:	6f e0       	ldi	r22, 0x0F	; 15
 584:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
			j--;
 588:	11 50       	subi	r17, 0x01	; 1
		}while(j>=SEV_SEG_DIGIT_0);
 58a:	79 f7       	brne	.-34     	; 0x56a <SEV_SEG_startupAni+0x3a>
		i--;
 58c:	01 50       	subi	r16, 0x01	; 1

void SEV_SEG_startupAni(void)	//Simple startup animation scans the decimal point (DP) right to left then back a few times.
{
	SEV_SEG_allClear();			//Start by clearing all digits.
	uint8_t i = 3;				//Animation repeats 3 times.
	while(i)					//The two while loops using j write the DP, pause, clear the DP then move to the next digit from left to right.
 58e:	c9 f6       	brne	.-78     	; 0x542 <SEV_SEG_startupAni+0x12>
			j--;
		}while(j>=SEV_SEG_DIGIT_0);
		i--;
	}
	//Following block prints "ISO-8601" to the seven-segment displays.
	SEV_SEG_writeByte(SEV_SEG_DIGIT_11, 1);
 590:	84 e8       	ldi	r24, 0x84	; 132
 592:	61 e0       	ldi	r22, 0x01	; 1
 594:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_10, 5);
 598:	83 e8       	ldi	r24, 0x83	; 131
 59a:	65 e0       	ldi	r22, 0x05	; 5
 59c:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_9, 0);
 5a0:	82 e8       	ldi	r24, 0x82	; 130
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_8, SEV_SEG_CODEB_DASH);
 5a8:	81 e8       	ldi	r24, 0x81	; 129
 5aa:	6a e0       	ldi	r22, 0x0A	; 10
 5ac:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_7, 8);
 5b0:	88 e0       	ldi	r24, 0x08	; 8
 5b2:	68 e0       	ldi	r22, 0x08	; 8
 5b4:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_6, 6);
 5b8:	87 e0       	ldi	r24, 0x07	; 7
 5ba:	66 e0       	ldi	r22, 0x06	; 6
 5bc:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_5, 0);
 5c0:	86 e0       	ldi	r24, 0x06	; 6
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_4, 1);
 5c8:	85 e0       	ldi	r24, 0x05	; 5
 5ca:	61 e0       	ldi	r22, 0x01	; 1
 5cc:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
 5d0:	80 e2       	ldi	r24, 0x20	; 32
 5d2:	9e e4       	ldi	r25, 0x4E	; 78
 5d4:	28 ec       	ldi	r18, 0xC8	; 200
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	f9 01       	movw	r30, r18
 5da:	31 97       	sbiw	r30, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <SEV_SEG_startupAni+0xaa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5e0:	d9 f7       	brne	.-10     	; 0x5d8 <SEV_SEG_startupAni+0xa8>
		
	_delay_ms(2000);
}
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	0f 91       	pop	r16
 5ea:	08 95       	ret

000005ec <init_SEV_SEG>:

}

void init_SEV_SEG(void)
{
	SPI_DDR |= (1 << SEV_SEG_LOAD); 				//Set LOAD pin as an output
 5ec:	21 9a       	sbi	0x04, 1	; 4
	PORTB |= (1 << SEV_SEG_LOAD);					//Set LOAD pin to high at start (data latching occurs on LOAD rising edge).
 5ee:	29 9a       	sbi	0x05, 1	; 5
	SEV_SEG_writeByte(SEV_SEG_SCAN_LIMIT_A, 7);		//Set number of digits in the display to 8 (Data=number of digits - 1)
 5f0:	8b e0       	ldi	r24, 0x0B	; 11
 5f2:	67 e0       	ldi	r22, 0x07	; 7
 5f4:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_INTENSITY_A, 0x08);	//Set brightness (duty cycle) to about half-way.
 5f8:	8a e0       	ldi	r24, 0x0A	; 10
 5fa:	68 e0       	ldi	r22, 0x08	; 8
 5fc:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_SHUTDOWN_A, 1);		//Enter normal operation (exit shutdown mode).
 600:	8c e0       	ldi	r24, 0x0C	; 12
 602:	61 e0       	ldi	r22, 0x01	; 1
 604:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
    SEV_SEG_writeByte(SEV_SEG_DECODE_MODE_A, 0xFF);	//Set all digits to be set by Code B data input.
 608:	89 e0       	ldi	r24, 0x09	; 9
 60a:	6f ef       	ldi	r22, 0xFF	; 255
 60c:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	
	SEV_SEG_writeByte(SEV_SEG_SCAN_LIMIT_B, 7);		//Set number of digits in the display to 8 (Data=number of digits - 1)
 610:	8b e8       	ldi	r24, 0x8B	; 139
 612:	67 e0       	ldi	r22, 0x07	; 7
 614:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_INTENSITY_B, 0x08);	//Set brightness (duty cycle) to about half-way.
 618:	8a e8       	ldi	r24, 0x8A	; 138
 61a:	68 e0       	ldi	r22, 0x08	; 8
 61c:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_SHUTDOWN_B, 1);		//Enter normal operation (exit shutdown mode).
 620:	8c e8       	ldi	r24, 0x8C	; 140
 622:	61 e0       	ldi	r22, 0x01	; 1
 624:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
    SEV_SEG_writeByte(SEV_SEG_DECODE_MODE_B, 0xFF);	//Set all digits to be set by Code B data input.
 628:	89 e8       	ldi	r24, 0x89	; 137
 62a:	6f ef       	ldi	r22, 0xFF	; 255
 62c:	0e 94 76 02 	call	0x4ec	; 0x4ec <SEV_SEG_writeByte>
}
 630:	08 95       	ret

00000632 <__udivmodqi4>:
 632:	99 1b       	sub	r25, r25
 634:	79 e0       	ldi	r23, 0x09	; 9
 636:	04 c0       	rjmp	.+8      	; 0x640 <__udivmodqi4_ep>

00000638 <__udivmodqi4_loop>:
 638:	99 1f       	adc	r25, r25
 63a:	96 17       	cp	r25, r22
 63c:	08 f0       	brcs	.+2      	; 0x640 <__udivmodqi4_ep>
 63e:	96 1b       	sub	r25, r22

00000640 <__udivmodqi4_ep>:
 640:	88 1f       	adc	r24, r24
 642:	7a 95       	dec	r23
 644:	c9 f7       	brne	.-14     	; 0x638 <__udivmodqi4_loop>
 646:	80 95       	com	r24
 648:	08 95       	ret

0000064a <_exit>:
 64a:	f8 94       	cli

0000064c <__stop_program>:
 64c:	ff cf       	rjmp	.-2      	; 0x64c <__stop_program>
