
GPSClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000054a  000005be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 000000a0  00000000  00000000  000005d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000179  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006f6  00000000  00000000  000007ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000040b  00000000  00000000  00000ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008d2  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  00001bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000022d  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001b0  00000000  00000000  00001f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00002101  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 a3 02 	jmp	0x546	; 0x546 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
	transmitByte(receiveByte());	//Echos received byte.

}


int main(void) {
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	1f 93       	push	r17
  9c:	df 93       	push	r29
  9e:	cf 93       	push	r28
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	29 97       	sbiw	r28, 0x09	; 9
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61

	//CLKPR: Clock Prescale Register.  Pre-scale the system clock.  The following setup will disable prescaling so the system clock will be the full 8MHz internal frequency.
	CLKPR = (1 << CLKPCE);		//CLKPCE: Clock Prescaler Change Enable.  Must set to one to enable changes to clock prescaler bits.
  b0:	80 e8       	ldi	r24, 0x80	; 128
  b2:	80 93 61 00 	sts	0x0061, r24
	CLKPR = 0;					//Once CLKPCE is enabled, Clock Prescaler Select Bits can be changed if done within 4 cycles.  In this case, clear all for prescaler value 1 (i.e. 8MHz system).
  b6:	10 92 61 00 	sts	0x0061, r1
	
	//sei();								//Global enable interrupts (from avr/interrupt.h)
	initUSART();							//Initialises the USART for receive/transmit data, 8-bit with 1 stop bit.
  ba:	0e 94 59 01 	call	0x2b2	; 0x2b2 <initUSART>
	printString("\r\n\n\nISO 8601\r\n");	//Initialisation test for USART.
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <printString>
	initSPI(SPI_POL, SPI_PHA);				//Initialise SPI for RTC - mode 3 (compatible mode 1 or 3) - Polarity=0, Phase=1 and slave select on PB2
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 9b 01 	call	0x336	; 0x336 <initSPI>
	init_RTC();								//Initialise for comms with DS3234 real-time clock.
  ce:	0e 94 b9 01 	call	0x372	; 0x372 <init_RTC>
	init_SEV_SEG();							//Initialise for comms with 2x MAX7219 8x7-seg LED drivers.
  d2:	0e 94 74 02 	call	0x4e8	; 0x4e8 <init_SEV_SEG>
	SEV_SEG_startupAni();					//Initialisation test for the 16 7-seg LED display.
  d6:	0e 94 3f 02 	call	0x47e	; 0x47e <SEV_SEG_startupAni>
	SEV_SEG_allClear();						//Clear all 7-seg digits.
  da:	0e 94 09 02 	call	0x412	; 0x412 <SEV_SEG_allClear>
	struct RTC_Data RTC_time;	//Define a structure callede "RTC_time" that will contain all the used date and time data retrieved from the RTC.

	while (1)
	{	

		RTC_getTime(&RTC_time);	//Refresh time data
  de:	7e 01       	movw	r14, r28
  e0:	08 94       	sec
  e2:	e1 1c       	adc	r14, r1
  e4:	f1 1c       	adc	r15, r1
		

		printString("\r");
		printByte(BCD_TO_INT(RTC_time.century));
  e6:	1a e0       	ldi	r17, 0x0A	; 10
	struct RTC_Data RTC_time;	//Define a structure callede "RTC_time" that will contain all the used date and time data retrieved from the RTC.

	while (1)
	{	

		RTC_getTime(&RTC_time);	//Refresh time data
  e8:	c7 01       	movw	r24, r14
  ea:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <RTC_getTime>
		

		printString("\r");
  ee:	8f e0       	ldi	r24, 0x0F	; 15
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <printString>
		printByte(BCD_TO_INT(RTC_time.century));
  f6:	89 85       	ldd	r24, Y+9	; 0x09
  f8:	28 2f       	mov	r18, r24
  fa:	22 95       	swap	r18
  fc:	2f 70       	andi	r18, 0x0F	; 15
  fe:	21 9f       	mul	r18, r17
 100:	90 01       	movw	r18, r0
 102:	11 24       	eor	r1, r1
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	82 0f       	add	r24, r18
 108:	0e 94 81 01 	call	0x302	; 0x302 <printByte>
		printByte(BCD_TO_INT(RTC_time.year));
 10c:	88 85       	ldd	r24, Y+8	; 0x08
 10e:	28 2f       	mov	r18, r24
 110:	22 95       	swap	r18
 112:	2f 70       	andi	r18, 0x0F	; 15
 114:	21 9f       	mul	r18, r17
 116:	90 01       	movw	r18, r0
 118:	11 24       	eor	r1, r1
 11a:	8f 70       	andi	r24, 0x0F	; 15
 11c:	82 0f       	add	r24, r18
 11e:	0e 94 81 01 	call	0x302	; 0x302 <printByte>
		printString("-");
 122:	81 e1       	ldi	r24, 0x11	; 17
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 70 01 	call	0x2e0	; 0x2e0 <printString>
		printByte(BCD_TO_INT(RTC_time.month));
 12a:	8f 81       	ldd	r24, Y+7	; 0x07
 12c:	28 2f       	mov	r18, r24
 12e:	22 95       	swap	r18
 130:	2f 70       	andi	r18, 0x0F	; 15
 132:	21 9f       	mul	r18, r17
 134:	90 01       	movw	r18, r0
 136:	11 24       	eor	r1, r1
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	82 0f       	add	r24, r18
 13c:	0e 94 81 01 	call	0x302	; 0x302 <printByte>
		printString("-");
 140:	81 e1       	ldi	r24, 0x11	; 17
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 70 01 	call	0x2e0	; 0x2e0 <printString>
		printByte(BCD_TO_INT(RTC_time.date));
 148:	8e 81       	ldd	r24, Y+6	; 0x06
 14a:	28 2f       	mov	r18, r24
 14c:	22 95       	swap	r18
 14e:	2f 70       	andi	r18, 0x0F	; 15
 150:	21 9f       	mul	r18, r17
 152:	90 01       	movw	r18, r0
 154:	11 24       	eor	r1, r1
 156:	8f 70       	andi	r24, 0x0F	; 15
 158:	82 0f       	add	r24, r18
 15a:	0e 94 81 01 	call	0x302	; 0x302 <printByte>
		printString(" ");
 15e:	83 e1       	ldi	r24, 0x13	; 19
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 70 01 	call	0x2e0	; 0x2e0 <printString>
		printByte(BCD_TO_INT(RTC_time.hours));
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	28 2f       	mov	r18, r24
 16a:	22 95       	swap	r18
 16c:	2f 70       	andi	r18, 0x0F	; 15
 16e:	21 9f       	mul	r18, r17
 170:	90 01       	movw	r18, r0
 172:	11 24       	eor	r1, r1
 174:	8f 70       	andi	r24, 0x0F	; 15
 176:	82 0f       	add	r24, r18
 178:	0e 94 81 01 	call	0x302	; 0x302 <printByte>
		printString(":");
 17c:	85 e1       	ldi	r24, 0x15	; 21
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 70 01 	call	0x2e0	; 0x2e0 <printString>
		printByte(BCD_TO_INT(RTC_time.minutes));
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	28 2f       	mov	r18, r24
 188:	22 95       	swap	r18
 18a:	2f 70       	andi	r18, 0x0F	; 15
 18c:	21 9f       	mul	r18, r17
 18e:	90 01       	movw	r18, r0
 190:	11 24       	eor	r1, r1
 192:	8f 70       	andi	r24, 0x0F	; 15
 194:	82 0f       	add	r24, r18
 196:	0e 94 81 01 	call	0x302	; 0x302 <printByte>
		printString(":");
 19a:	85 e1       	ldi	r24, 0x15	; 21
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <printString>
		printByte(BCD_TO_INT(RTC_time.seconds));
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	28 2f       	mov	r18, r24
 1a6:	22 95       	swap	r18
 1a8:	2f 70       	andi	r18, 0x0F	; 15
 1aa:	21 9f       	mul	r18, r17
 1ac:	90 01       	movw	r18, r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 70       	andi	r24, 0x0F	; 15
 1b2:	82 0f       	add	r24, r18
 1b4:	0e 94 81 01 	call	0x302	; 0x302 <printByte>
		printString(" ");
 1b8:	83 e1       	ldi	r24, 0x13	; 19
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <printString>



	//SEV_SEG_writeByte(SEV_SEG_DIGIT_15, SEV_SEG_CODEB_DASH);
	SEV_SEG_writeByte(SEV_SEG_DIGIT_14, ((RTC_time.century) >> 4));
 1c0:	69 85       	ldd	r22, Y+9	; 0x09
 1c2:	62 95       	swap	r22
 1c4:	6f 70       	andi	r22, 0x0F	; 15
 1c6:	87 e8       	ldi	r24, 0x87	; 135
 1c8:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_13, ((RTC_time.century) & 0b00001111));
 1cc:	69 85       	ldd	r22, Y+9	; 0x09
 1ce:	6f 70       	andi	r22, 0x0F	; 15
 1d0:	86 e8       	ldi	r24, 0x86	; 134
 1d2:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_12, ((RTC_time.year) >> 4));
 1d6:	68 85       	ldd	r22, Y+8	; 0x08
 1d8:	62 95       	swap	r22
 1da:	6f 70       	andi	r22, 0x0F	; 15
 1dc:	85 e8       	ldi	r24, 0x85	; 133
 1de:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_11, ((RTC_time.year) & 0b00001111) | SEV_SEG_DP);
 1e2:	68 85       	ldd	r22, Y+8	; 0x08
 1e4:	6f 70       	andi	r22, 0x0F	; 15
 1e6:	60 68       	ori	r22, 0x80	; 128
 1e8:	84 e8       	ldi	r24, 0x84	; 132
 1ea:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_10, ((RTC_time.month) >> 4));
 1ee:	6f 81       	ldd	r22, Y+7	; 0x07
 1f0:	62 95       	swap	r22
 1f2:	6f 70       	andi	r22, 0x0F	; 15
 1f4:	83 e8       	ldi	r24, 0x83	; 131
 1f6:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_9, ((RTC_time.month) & 0b00001111) | SEV_SEG_DP);
 1fa:	6f 81       	ldd	r22, Y+7	; 0x07
 1fc:	6f 70       	andi	r22, 0x0F	; 15
 1fe:	60 68       	ori	r22, 0x80	; 128
 200:	82 e8       	ldi	r24, 0x82	; 130
 202:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_8, ((RTC_time.date) >> 4));
 206:	6e 81       	ldd	r22, Y+6	; 0x06
 208:	62 95       	swap	r22
 20a:	6f 70       	andi	r22, 0x0F	; 15
 20c:	81 e8       	ldi	r24, 0x81	; 129
 20e:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_7, ((RTC_time.date) & 0b00001111) | SEV_SEG_DP);
 212:	6e 81       	ldd	r22, Y+6	; 0x06
 214:	6f 70       	andi	r22, 0x0F	; 15
 216:	60 68       	ori	r22, 0x80	; 128
 218:	88 e0       	ldi	r24, 0x08	; 8
 21a:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_6, ((RTC_time.hours) >> 4));
 21e:	6b 81       	ldd	r22, Y+3	; 0x03
 220:	62 95       	swap	r22
 222:	6f 70       	andi	r22, 0x0F	; 15
 224:	87 e0       	ldi	r24, 0x07	; 7
 226:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_5, ((RTC_time.hours) & 0b00001111) | SEV_SEG_DP);
 22a:	6b 81       	ldd	r22, Y+3	; 0x03
 22c:	6f 70       	andi	r22, 0x0F	; 15
 22e:	60 68       	ori	r22, 0x80	; 128
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_4, ((RTC_time.minutes) >> 4));
 236:	6a 81       	ldd	r22, Y+2	; 0x02
 238:	62 95       	swap	r22
 23a:	6f 70       	andi	r22, 0x0F	; 15
 23c:	85 e0       	ldi	r24, 0x05	; 5
 23e:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_3, ((RTC_time.minutes) & 0b00001111) | SEV_SEG_DP);
 242:	6a 81       	ldd	r22, Y+2	; 0x02
 244:	6f 70       	andi	r22, 0x0F	; 15
 246:	60 68       	ori	r22, 0x80	; 128
 248:	84 e0       	ldi	r24, 0x04	; 4
 24a:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_2, ((RTC_time.seconds) >> 4));
 24e:	69 81       	ldd	r22, Y+1	; 0x01
 250:	62 95       	swap	r22
 252:	6f 70       	andi	r22, 0x0F	; 15
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_DIGIT_1, ((RTC_time.seconds) & 0b00001111));
 25a:	69 81       	ldd	r22, Y+1	; 0x01
 25c:	6f 70       	andi	r22, 0x0F	; 15
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
 264:	41 cf       	rjmp	.-382    	; 0xe8 <main+0x52>

00000266 <__vector_18>:

//Set polarity and phase for SPI communications.  Fortunately RTC and Seven Seg display driver both work in mode 3 so do not have to switch between modes, only have to initialise SPI once..
#define	SPI_POL	1	//Define the polarity setting when initialising SPI
#define SPI_PHA	1	//Define the phase setting when initialising SPI

ISR(USART_RX_vect)	{				//Interrupt subroutine triggered when the USART receives a byte.
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	2f 93       	push	r18
 272:	3f 93       	push	r19
 274:	4f 93       	push	r20
 276:	5f 93       	push	r21
 278:	6f 93       	push	r22
 27a:	7f 93       	push	r23
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	af 93       	push	r26
 282:	bf 93       	push	r27
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
	
	transmitByte(receiveByte());	//Echos received byte.
 288:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <receiveByte>
 28c:	0e 94 6d 01 	call	0x2da	; 0x2da <transmitByte>

}
 290:	ff 91       	pop	r31
 292:	ef 91       	pop	r30
 294:	bf 91       	pop	r27
 296:	af 91       	pop	r26
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	7f 91       	pop	r23
 29e:	6f 91       	pop	r22
 2a0:	5f 91       	pop	r21
 2a2:	4f 91       	pop	r20
 2a4:	3f 91       	pop	r19
 2a6:	2f 91       	pop	r18
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <initUSART>:
#include <USART.h>			//Needed for definitions in this c file. Must be called before util/setbaud.h as contains BAUD definition
#include <util/setbaud.h>	//Used to caluculate Usart Baud Rate Register (High and Low) values as a function of F_CPU defined in the makefile abd BAUD defined

void initUSART(void) {		//Initialise the USART peripheral
							//Utilising USART0
	UBRR0H = UBRRH_VALUE;	//USART Baud Rate Register High -Value defined in util/setbaud.h
 2b2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;	//USART Baud Rate Register Low  -Value defined in util/setbaud.h
 2b6:	83 e3       	ldi	r24, 0x33	; 51
 2b8:	80 93 c4 00 	sts	0x00C4, r24

	#if USE_2X						//Double-Speed detemined in util/setbaud.h.  Needed is defined BAUD not achieavable without U2X0 
		UCSR0A |= (1 << U2X0);		//UCSR0A = USART 0 Control and Status Register A
	#else							//U2X0 = Double USART 0 Transmission Speed Enable
		UCSR0A &= ~(1 << U2X0);
 2bc:	e0 ec       	ldi	r30, 0xC0	; 192
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	8d 7f       	andi	r24, 0xFD	; 253
 2c4:	80 83       	st	Z, r24
	#endif
	
	UCSR0B = (1 << RXCIE0) | (1 << TXEN0) | (1 << RXEN0);		//UCSR0B = USART 0 Control and Status Register B
 2c6:	88 e9       	ldi	r24, 0x98	; 152
 2c8:	80 93 c1 00 	sts	0x00C1, r24
																//RXCIE0 = USART 0 RX Complete Interrupt Enable
																//TXEN0 = Transmit Enable USART0
																//RXEN0 = Receive Enable USART0
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);					//UCSR0C = USART 0 Control and Status Register C
 2cc:	86 e0       	ldi	r24, 0x06	; 6
 2ce:	80 93 c2 00 	sts	0x00C2, r24
																//UCSZ02:0 = Usart Character Size, Set to 0b011 for 8-bit.
																//(USBS = Usart Stop Bit Select, Stays at 0b0 for 1 stop bit)
}
 2d2:	08 95       	ret

000002d4 <receiveByte>:


uint8_t receiveByte(void) {	//Sets a variable to whatever was received by the USART

	return UDR0;			//Returns received data.  UDR0 = USART 0 Data Register
 2d4:	80 91 c6 00 	lds	r24, 0x00C6
}
 2d8:	08 95       	ret

000002da <transmitByte>:


void transmitByte(uint8_t data) {	//Transmits a byte from the USART

	UDR0 = data;					//UDR0 = USART 0 Data Register
 2da:	80 93 c6 00 	sts	0x00C6, r24
}
 2de:	08 95       	ret

000002e0 <printString>:


void printString(const char string[]) {			//Transmits a string of characters.
 2e0:	ac 01       	movw	r20, r24
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <printString+0x14>

	uint8_t i = 0;								//Counter to increment for every character in the string.
	while ((string[i]) != '\0')	{			//Until null character (end of string).
		while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
 2e6:	80 91 c0 00 	lds	r24, 0x00C0
 2ea:	85 ff       	sbrs	r24, 5
 2ec:	fc cf       	rjmp	.-8      	; 0x2e6 <printString+0x6>
}


void transmitByte(uint8_t data) {	//Transmits a byte from the USART

	UDR0 = data;					//UDR0 = USART 0 Data Register
 2ee:	e0 93 c6 00 	sts	0x00C6, r30

	uint8_t i = 0;								//Counter to increment for every character in the string.
	while ((string[i]) != '\0')	{			//Until null character (end of string).
		while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
		transmitByte(string[i]);				//UCSR0A = USART 0 Control and Status Register A
		i++;									//UDRE0 = USART 0 Data Register Empty Flag
 2f2:	2f 5f       	subi	r18, 0xFF	; 255


void printString(const char string[]) {			//Transmits a string of characters.

	uint8_t i = 0;								//Counter to increment for every character in the string.
	while ((string[i]) != '\0')	{			//Until null character (end of string).
 2f4:	fa 01       	movw	r30, r20
 2f6:	e2 0f       	add	r30, r18
 2f8:	f1 1d       	adc	r31, r1
 2fa:	e0 81       	ld	r30, Z
 2fc:	ee 23       	and	r30, r30
 2fe:	99 f7       	brne	.-26     	; 0x2e6 <printString+0x6>
		while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit). Otherwise operates too fast and drops characters.
		transmitByte(string[i]);				//UCSR0A = USART 0 Control and Status Register A
		i++;									//UDRE0 = USART 0 Data Register Empty Flag
	}
}
 300:	08 95       	ret

00000302 <printByte>:


void printByte(uint8_t byte) {				//Takes an integer and transmits the characters
 302:	28 2f       	mov	r18, r24
											//(modified to only print last 2 digits (tens & ones)).
	//while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	//transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
 304:	80 91 c0 00 	lds	r24, 0x00C0
 308:	85 ff       	sbrs	r24, 5
 30a:	fc cf       	rjmp	.-8      	; 0x304 <printByte+0x2>
	transmitByte('0'+ ((byte/10) % 10));	//Tens
 30c:	82 2f       	mov	r24, r18
 30e:	6a e0       	ldi	r22, 0x0A	; 10
 310:	0e 94 97 02 	call	0x52e	; 0x52e <__udivmodqi4>
 314:	0e 94 97 02 	call	0x52e	; 0x52e <__udivmodqi4>
 318:	90 5d       	subi	r25, 0xD0	; 208
}


void transmitByte(uint8_t data) {	//Transmits a byte from the USART

	UDR0 = data;					//UDR0 = USART 0 Data Register
 31a:	90 93 c6 00 	sts	0x00C6, r25
											//(modified to only print last 2 digits (tens & ones)).
	//while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	//transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ ((byte/10) % 10));	//Tens
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
 31e:	80 91 c0 00 	lds	r24, 0x00C0
 322:	85 ff       	sbrs	r24, 5
 324:	fc cf       	rjmp	.-8      	; 0x31e <printByte+0x1c>
	transmitByte('0'+ (byte % 10));		//Ones
 326:	82 2f       	mov	r24, r18
 328:	6a e0       	ldi	r22, 0x0A	; 10
 32a:	0e 94 97 02 	call	0x52e	; 0x52e <__udivmodqi4>
 32e:	90 5d       	subi	r25, 0xD0	; 208
}


void transmitByte(uint8_t data) {	//Transmits a byte from the USART

	UDR0 = data;					//UDR0 = USART 0 Data Register
 330:	90 93 c6 00 	sts	0x00C6, r25
	//transmitByte('0'+ (byte/100));		//Hundreds
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ ((byte/10) % 10));	//Tens
	while (!(UCSR0A & (1 << UDRE0))) {}	//Wait until the USART 0 data register is empty (ready to transmit).
	transmitByte('0'+ (byte % 10));		//Ones
 334:	08 95       	ret

00000336 <initSPI>:
#include <SPI.h>


void initSPI(uint8_t polarity, uint8_t phase) {	//Will initioalise SPI hardware as master device and frequency/16 then enable.

	SPI_DDR |= (1 << SPI_MOSI);		//MOSI - Output on MOSI
 336:	23 9a       	sbi	0x04, 3	; 4
	SPI_PORT |= (1 << SPI_MISO);	 	//MISO - Left set as an input but pullup activated
 338:	2c 9a       	sbi	0x05, 4	; 5
	SPI_DDR |= (1 << SPI_SCK);			//SCK - Output on SCK
 33a:	25 9a       	sbi	0x04, 5	; 4
	SPI_DDR |= (1 << PB2);				//PB2 on AVR is designated SS but any I/O pin can be used, the designation is really for when AVR
 33c:	22 9a       	sbi	0x04, 2	; 4
										//	SPI acts in slave mode.  HOWEVER must always set PB2 to output even if alternate I/O pin is in
										//	use otherwise AVR defers to other uCUs as per multimaster setup.
	
	//SPCR = SPI Control Register
	SPCR |= (1 << SPR1);	//Div 16, safer for breadboards (Slower SPI frequency to reduce chance of interference)
 33e:	9c b5       	in	r25, 0x2c	; 44
 340:	92 60       	ori	r25, 0x02	; 2
 342:	9c bd       	out	0x2c, r25	; 44
	SPCR |= (1 << MSTR);	//Clockmaster
 344:	9c b5       	in	r25, 0x2c	; 44
 346:	90 61       	ori	r25, 0x10	; 16
 348:	9c bd       	out	0x2c, r25	; 44
	SPCR |= (1 << SPE);	//Enable SPI
 34a:	9c b5       	in	r25, 0x2c	; 44
 34c:	90 64       	ori	r25, 0x40	; 64
 34e:	9c bd       	out	0x2c, r25	; 44
	
	//Set Polarity/Phase Mode to 3 for RTC
	SPCR |= (polarity << CPOL);	//CPOL = SPI Clock Polarity, 0 for Clock Idles Low, 1 for clock idles high
 350:	9c b5       	in	r25, 0x2c	; 44
 352:	88 0f       	add	r24, r24
 354:	88 0f       	add	r24, r24
 356:	88 0f       	add	r24, r24
 358:	98 2b       	or	r25, r24
 35a:	9c bd       	out	0x2c, r25	; 44
	SPCR |= (phase << CPHA);		//CPHA = SPI Clock Phase, 1 for Data Sampled on Falling Edge, 0 for Rising Edge
 35c:	8c b5       	in	r24, 0x2c	; 44
 35e:	66 0f       	add	r22, r22
 360:	66 0f       	add	r22, r22
 362:	86 2b       	or	r24, r22
 364:	8c bd       	out	0x2c, r24	; 44
}
 366:	08 95       	ret

00000368 <SPI_tradeByte>:

void SPI_tradeByte(uint8_t byte) {
	
	SPDR = byte; 						//SPI starts sending immediately.  SPDR=SPI Data Register
 368:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF))) {}	//Wait until SPIF (SPI Interrupt Flag) in the SPSR (SPI Status Register) is set indication transfer is complete
 36a:	0d b4       	in	r0, 0x2d	; 45
 36c:	07 fe       	sbrs	r0, 7
 36e:	fd cf       	rjmp	.-6      	; 0x36a <SPI_tradeByte+0x2>
	//SPDR now contains the received byte
}
 370:	08 95       	ret

00000372 <init_RTC>:
#include <DS3234RTC.h>
#include <SPI.h>

void init_RTC (void)
{
	SPI_DDR |= (1 << RTC_SS);	//Set slave select pin on uMC as an output.
 372:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << RTC_SS);	//Start SS off not selected (i.e. high as SS is inverted)
 374:	2a 9a       	sbi	0x05, 2	; 5
}
 376:	08 95       	ret

00000378 <RTC_SPI_writeByte>:
	return(SPDR);				//Return the byte.  SPDR=SPI Data Register
}


void RTC_SPI_writeByte(uint8_t address, uint8_t data) //Writes a byte to the desired address
{
 378:	1f 93       	push	r17
 37a:	16 2f       	mov	r17, r22
	SLAVE_SELECT_RTC;			//Enable the RTC comms
 37c:	2a 98       	cbi	0x05, 2	; 5
	SPI_tradeByte(address);		//Send the address to be written to
 37e:	0e 94 b4 01 	call	0x368	; 0x368 <SPI_tradeByte>
	SPI_tradeByte(data);		//Send the data to be written to address
 382:	81 2f       	mov	r24, r17
 384:	0e 94 b4 01 	call	0x368	; 0x368 <SPI_tradeByte>
	SLAVE_DESELECT_RTC;			//Disable the RTC comms
 388:	2a 9a       	sbi	0x05, 2	; 5
}
 38a:	1f 91       	pop	r17
 38c:	08 95       	ret

0000038e <RTC_SPI_readByte>:
	PORTB |= (1 << RTC_SS);	//Start SS off not selected (i.e. high as SS is inverted)
}

uint8_t RTC_SPI_readByte(uint8_t address) //Reads and returns a byte at the desired address
{
	SLAVE_SELECT_RTC;			//Enable the RTC comms
 38e:	2a 98       	cbi	0x05, 2	; 5
	SPI_tradeByte(address);		//Send the address to be read from
 390:	0e 94 b4 01 	call	0x368	; 0x368 <SPI_tradeByte>
	SPI_tradeByte(0);			//Send dummy byte to load SPDR with byte at address
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0e 94 b4 01 	call	0x368	; 0x368 <SPI_tradeByte>
	SLAVE_DESELECT_RTC;			//Disable the RTC comms
 39a:	2a 9a       	sbi	0x05, 2	; 5
	return(SPDR);				//Return the byte.  SPDR=SPI Data Register
 39c:	8e b5       	in	r24, 0x2e	; 46
}
 39e:	08 95       	ret

000003a0 <RTC_getTime>:
	SPI_tradeByte(data);		//Send the data to be written to address
	SLAVE_DESELECT_RTC;			//Disable the RTC comms
}

void RTC_getTime (struct RTC_Data *time)	//Fill in all structure fields from data in the RTC.  All bytes are BCD representations of data.
{
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	ec 01       	movw	r28, r24
	time->seconds = (RTC_SPI_readByte(RTC_SECR_RA));								//B7=0, B6-B4=(10 seconds), B3-B0=(seconds)
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 c7 01 	call	0x38e	; 0x38e <RTC_SPI_readByte>
 3ac:	88 83       	st	Y, r24
	time->minutes = (RTC_SPI_readByte(RTC_MINR_RA));								//B7=0, B6-B4=(10 minutes), B3-B0=(minutes)
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 c7 01 	call	0x38e	; 0x38e <RTC_SPI_readByte>
 3b4:	89 83       	std	Y+1, r24	; 0x01
	time->hours = ((RTC_SPI_readByte(RTC_HRR_RA)) & 0b00111111);					//B7-B6=0, B5=(20 hours/(~AM/PM)), B4=(10 hours), B3-B0=(hours)
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	0e 94 c7 01 	call	0x38e	; 0x38e <RTC_SPI_readByte>
 3bc:	8f 73       	andi	r24, 0x3F	; 63
 3be:	8a 83       	std	Y+2, r24	; 0x02
	time->twelve_hr_flag = (((RTC_SPI_readByte(RTC_HRR_RA)) & 0b01000000) >> 6);	//B7-B1=0, B0=(12/~24)
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	0e 94 c7 01 	call	0x38e	; 0x38e <RTC_SPI_readByte>
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	80 74       	andi	r24, 0x40	; 64
 3ca:	90 70       	andi	r25, 0x00	; 0
 3cc:	26 e0       	ldi	r18, 0x06	; 6
 3ce:	95 95       	asr	r25
 3d0:	87 95       	ror	r24
 3d2:	2a 95       	dec	r18
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <RTC_getTime+0x2e>
 3d6:	8b 83       	std	Y+3, r24	; 0x03
	time->day = (RTC_SPI_readByte(RTC_DAYR_RA));									//B7-B3=0, B2-B0=(day)
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	0e 94 c7 01 	call	0x38e	; 0x38e <RTC_SPI_readByte>
 3de:	8c 83       	std	Y+4, r24	; 0x04
	time->date = (RTC_SPI_readByte(RTC_DATER_RA));									//B7-B6=0, B5-B4=(10 date), B3-B0=(date)
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	0e 94 c7 01 	call	0x38e	; 0x38e <RTC_SPI_readByte>
 3e6:	8d 83       	std	Y+5, r24	; 0x05
	time->month = ((RTC_SPI_readByte(RTC_MCR_RA)) & 0b00011111);					//B7-B5=0, B4=(10 month), B3-B0=(month)
 3e8:	85 e0       	ldi	r24, 0x05	; 5
 3ea:	0e 94 c7 01 	call	0x38e	; 0x38e <RTC_SPI_readByte>
 3ee:	8f 71       	andi	r24, 0x1F	; 31
 3f0:	8e 83       	std	Y+6, r24	; 0x06
	time->year = (RTC_SPI_readByte(RTC_YRR_RA));									//B7-B4=(10 year), B3-B0=(year)
 3f2:	86 e0       	ldi	r24, 0x06	; 6
 3f4:	0e 94 c7 01 	call	0x38e	; 0x38e <RTC_SPI_readByte>
 3f8:	8f 83       	std	Y+7, r24	; 0x07
	if(RTC_SPI_readByte(RTC_MCR_RA) & 0b10000000)									//B7= Century flag. Note, century is either 19 or 20.  I.e. if bit is clear, year is 19XX.
 3fa:	85 e0       	ldi	r24, 0x05	; 5
 3fc:	0e 94 c7 01 	call	0x38e	; 0x38e <RTC_SPI_readByte>
 400:	87 ff       	sbrs	r24, 7
 402:	02 c0       	rjmp	.+4      	; 0x408 <RTC_getTime+0x68>
	{
		time->century = 0b00100000;	//BCD 20		
 404:	80 e2       	ldi	r24, 0x20	; 32
 406:	01 c0       	rjmp	.+2      	; 0x40a <RTC_getTime+0x6a>
	}
	else
	{

		time->century = 0b00011001; //BCD 19
 408:	89 e1       	ldi	r24, 0x19	; 25
 40a:	88 87       	std	Y+8, r24	; 0x08
	}
					
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <SEV_SEG_allClear>:
	SEV_SEG_writeByte(SEV_SEG_SHUTDOWN_B, 1);		//Enter normal operation (exit shutdown mode).
    SEV_SEG_writeByte(SEV_SEG_DECODE_MODE_B, 0xFF);	//Set all digits to be set by Code B data input.
}

void SEV_SEG_allClear(void)	//Clears all digits.  Bypasses function "SEV_SEG_writeByte" and clears equivalent digits on both drivers simultaneously (~halves clear time).
{
 412:	1f 93       	push	r17
 414:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t i;
	for (i=8; i>0; i--)	//Counts down through the digits from digit 7 (8) to digit 0 (1).
	{
		SEV_SEG_LOAD_LOW;						//Drop the level of the LOAD pin
 416:	29 98       	cbi	0x05, 1	; 5
		SPI_tradeByte(i);						//Push in digit address i (will be in driver B at latch)
 418:	81 2f       	mov	r24, r17
 41a:	0e 94 b4 01 	call	0x368	; 0x368 <SPI_tradeByte>
		SPI_tradeByte(SEV_SEG_CODEB_BLANK);		//Push in data to clear digit at i (will be in driver B at latch)
 41e:	8f e0       	ldi	r24, 0x0F	; 15
 420:	0e 94 b4 01 	call	0x368	; 0x368 <SPI_tradeByte>
		SPI_tradeByte(i);						//Push in digit address i (will be in driver A at latch)
 424:	81 2f       	mov	r24, r17
 426:	0e 94 b4 01 	call	0x368	; 0x368 <SPI_tradeByte>
		SPI_tradeByte(SEV_SEG_CODEB_BLANK);		//Push in data to clear digit at i (will be in driver A at latch)
 42a:	8f e0       	ldi	r24, 0x0F	; 15
 42c:	0e 94 b4 01 	call	0x368	; 0x368 <SPI_tradeByte>
		SEV_SEG_LOAD_HIGH;						//Raise the level of the LOAD pin - this triggers latching of the sent bytes (last 16 bits of data in driver are latched).
 430:	29 9a       	sbi	0x05, 1	; 5
}

void SEV_SEG_allClear(void)	//Clears all digits.  Bypasses function "SEV_SEG_writeByte" and clears equivalent digits on both drivers simultaneously (~halves clear time).
{
	uint8_t i;
	for (i=8; i>0; i--)	//Counts down through the digits from digit 7 (8) to digit 0 (1).
 432:	11 50       	subi	r17, 0x01	; 1
 434:	81 f7       	brne	.-32     	; 0x416 <SEV_SEG_allClear+0x4>
		SPI_tradeByte(SEV_SEG_CODEB_BLANK);		//Push in data to clear digit at i (will be in driver B at latch)
		SPI_tradeByte(i);						//Push in digit address i (will be in driver A at latch)
		SPI_tradeByte(SEV_SEG_CODEB_BLANK);		//Push in data to clear digit at i (will be in driver A at latch)
		SEV_SEG_LOAD_HIGH;						//Raise the level of the LOAD pin - this triggers latching of the sent bytes (last 16 bits of data in driver are latched).
	}
}
 436:	1f 91       	pop	r17
 438:	08 95       	ret

0000043a <SEV_SEG_writeByte>:
#include <SPI.h>
#include <MAX7219.h>

 
void SEV_SEG_writeByte(uint8_t address, uint8_t data)	//Writes a byte to an address in both of the MAX7219s although one driver will receive data, the other will receive no-op command.
{
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	18 2f       	mov	r17, r24
 440:	06 2f       	mov	r16, r22
	if(address & 0x80)	//Check driver flag.  If set, address is for driver B (DIG_8 to DIG_15).
 442:	87 ff       	sbrs	r24, 7
 444:	0b c0       	rjmp	.+22     	; 0x45c <SEV_SEG_writeByte+0x22>
	{
		SEV_SEG_LOAD_LOW;			//Drop the level of the LOAD pin
 446:	29 98       	cbi	0x05, 1	; 5
		SPI_tradeByte(address);		//Send the register address where the data will be stored
 448:	0e 94 b4 01 	call	0x368	; 0x368 <SPI_tradeByte>
		SPI_tradeByte(data);		//Send the data to be stored
 44c:	80 2f       	mov	r24, r16
 44e:	0e 94 b4 01 	call	0x368	; 0x368 <SPI_tradeByte>
		SPI_tradeByte(0);			//Roll no-op data through to push real data out of driver A and into driver B (address byte)
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 b4 01 	call	0x368	; 0x368 <SPI_tradeByte>
		SPI_tradeByte(0);			//Roll no-op data through to push real data out of driver A and into driver B (data byte)
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0b c0       	rjmp	.+22     	; 0x472 <SEV_SEG_writeByte+0x38>
		SEV_SEG_LOAD_HIGH;			//Raise the level of the LOAD pin - this triggers latching of the sent bytes (last 16 bits of data are latched).
	}
	else				//Not set, therefore address is for driver A (DIG_0 to DIG_7).
	{
		SEV_SEG_LOAD_LOW;			//Drop the level of the LOAD pin
 45c:	29 98       	cbi	0x05, 1	; 5
		SPI_tradeByte(0);			//Roll no-op data in first for driver B when real data for driver A pushes it through (address byte)
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 b4 01 	call	0x368	; 0x368 <SPI_tradeByte>
		SPI_tradeByte(0);			//Roll no-op data in first for driver B when real data for driver A pushes it through (data byte)
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	0e 94 b4 01 	call	0x368	; 0x368 <SPI_tradeByte>
		SPI_tradeByte(address);		//Send the register address where the data will be stored
 46a:	81 2f       	mov	r24, r17
 46c:	0e 94 b4 01 	call	0x368	; 0x368 <SPI_tradeByte>
		SPI_tradeByte(data);		//Send the data to be stored
 470:	80 2f       	mov	r24, r16
 472:	0e 94 b4 01 	call	0x368	; 0x368 <SPI_tradeByte>
		SEV_SEG_LOAD_HIGH;			//Raise the level of the LOAD pin - this triggers latching of the sent bytes (last 16 bits of data are latched).
 476:	29 9a       	sbi	0x05, 1	; 5
	}

}
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	08 95       	ret

0000047e <SEV_SEG_startupAni>:
		SEV_SEG_LOAD_HIGH;						//Raise the level of the LOAD pin - this triggers latching of the sent bytes (last 16 bits of data in driver are latched).
	}
}

void SEV_SEG_startupAni(void)	//Simple startup animation scans the decimal point (DP) right to left then back a few times.
{
 47e:	0f 93       	push	r16
 480:	1f 93       	push	r17
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
	SEV_SEG_allClear();			//Start by clearing all digits.
 486:	0e 94 09 02 	call	0x412	; 0x412 <SEV_SEG_allClear>
 48a:	03 e0       	ldi	r16, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 48c:	c8 ec       	ldi	r28, 0xC8	; 200
 48e:	d0 e0       	ldi	r29, 0x00	; 0
 490:	18 e8       	ldi	r17, 0x88	; 136
	while(i)					//The two while loops using j write the DP, pause, clear the DP then move to the next digit from left to right.
	{
		uint8_t j = SEV_SEG_DIGIT_15;		//Loop for driver B (DIG_15 to DIG_8).
		do
		{
			SEV_SEG_writeByte(j,0x8F);		//Clear the digit except turn on the DP
 492:	81 2f       	mov	r24, r17
 494:	6f e8       	ldi	r22, 0x8F	; 143
 496:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
 49a:	84 ef       	ldi	r24, 0xF4	; 244
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	fe 01       	movw	r30, r28
 4a0:	31 97       	sbiw	r30, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <SEV_SEG_startupAni+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4a6:	d9 f7       	brne	.-10     	; 0x49e <SEV_SEG_startupAni+0x20>
			_delay_ms(50);
			SEV_SEG_writeByte(j,0x0F);		//Clear the digit inc. the DP
 4a8:	81 2f       	mov	r24, r17
 4aa:	6f e0       	ldi	r22, 0x0F	; 15
 4ac:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
			j--;
 4b0:	11 50       	subi	r17, 0x01	; 1
		}while(j>=SEV_SEG_DIGIT_8);
 4b2:	10 38       	cpi	r17, 0x80	; 128
 4b4:	71 f7       	brne	.-36     	; 0x492 <SEV_SEG_startupAni+0x14>
 4b6:	18 e0       	ldi	r17, 0x08	; 8
		
		j = SEV_SEG_DIGIT_7;		//Loop for driver A (DIG_7 to DIG_0).
		do
		{
			SEV_SEG_writeByte(j,0x8F);		//Clear the digit except turn on the DP
 4b8:	81 2f       	mov	r24, r17
 4ba:	6f e8       	ldi	r22, 0x8F	; 143
 4bc:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
 4c0:	84 ef       	ldi	r24, 0xF4	; 244
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	fe 01       	movw	r30, r28
 4c6:	31 97       	sbiw	r30, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <SEV_SEG_startupAni+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4cc:	d9 f7       	brne	.-10     	; 0x4c4 <SEV_SEG_startupAni+0x46>
			_delay_ms(50);
			SEV_SEG_writeByte(j,0x0F);		//Clear the digit inc. the DP
 4ce:	81 2f       	mov	r24, r17
 4d0:	6f e0       	ldi	r22, 0x0F	; 15
 4d2:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
			j--;
 4d6:	11 50       	subi	r17, 0x01	; 1
		}while(j>=SEV_SEG_DIGIT_0);
 4d8:	79 f7       	brne	.-34     	; 0x4b8 <SEV_SEG_startupAni+0x3a>

		i--;
 4da:	01 50       	subi	r16, 0x01	; 1

void SEV_SEG_startupAni(void)	//Simple startup animation scans the decimal point (DP) right to left then back a few times.
{
	SEV_SEG_allClear();			//Start by clearing all digits.
	uint8_t i = 3;				//Animation repeats 3 times.
	while(i)					//The two while loops using j write the DP, pause, clear the DP then move to the next digit from left to right.
 4dc:	c9 f6       	brne	.-78     	; 0x490 <SEV_SEG_startupAni+0x12>
			j--;
		}while(j>=SEV_SEG_DIGIT_0);

		i--;
	}
}
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	1f 91       	pop	r17
 4e4:	0f 91       	pop	r16
 4e6:	08 95       	ret

000004e8 <init_SEV_SEG>:

}

void init_SEV_SEG(void)
{
	SPI_DDR |= (1 << SEV_SEG_LOAD); 				//Set LOAD pin as an output
 4e8:	21 9a       	sbi	0x04, 1	; 4
	PORTB |= (1 << SEV_SEG_LOAD);					//Set LOAD pin to high at start (data latching occurs on LOAD rising edge).
 4ea:	29 9a       	sbi	0x05, 1	; 5
	SEV_SEG_writeByte(SEV_SEG_SCAN_LIMIT_A, 7);		//Set number of digits in the display to 8 (Data=number of digits - 1)
 4ec:	8b e0       	ldi	r24, 0x0B	; 11
 4ee:	67 e0       	ldi	r22, 0x07	; 7
 4f0:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_INTENSITY_A, 0x08);	//Set brightness (duty cycle) to about half-way.
 4f4:	8a e0       	ldi	r24, 0x0A	; 10
 4f6:	68 e0       	ldi	r22, 0x08	; 8
 4f8:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_SHUTDOWN_A, 1);		//Enter normal operation (exit shutdown mode).
 4fc:	8c e0       	ldi	r24, 0x0C	; 12
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
    SEV_SEG_writeByte(SEV_SEG_DECODE_MODE_A, 0xFF);	//Set all digits to be set by Code B data input.
 504:	89 e0       	ldi	r24, 0x09	; 9
 506:	6f ef       	ldi	r22, 0xFF	; 255
 508:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	
	SEV_SEG_writeByte(SEV_SEG_SCAN_LIMIT_B, 7);		//Set number of digits in the display to 8 (Data=number of digits - 1)
 50c:	8b e8       	ldi	r24, 0x8B	; 139
 50e:	67 e0       	ldi	r22, 0x07	; 7
 510:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_INTENSITY_B, 0x08);	//Set brightness (duty cycle) to about half-way.
 514:	8a e8       	ldi	r24, 0x8A	; 138
 516:	68 e0       	ldi	r22, 0x08	; 8
 518:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
	SEV_SEG_writeByte(SEV_SEG_SHUTDOWN_B, 1);		//Enter normal operation (exit shutdown mode).
 51c:	8c e8       	ldi	r24, 0x8C	; 140
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
    SEV_SEG_writeByte(SEV_SEG_DECODE_MODE_B, 0xFF);	//Set all digits to be set by Code B data input.
 524:	89 e8       	ldi	r24, 0x89	; 137
 526:	6f ef       	ldi	r22, 0xFF	; 255
 528:	0e 94 1d 02 	call	0x43a	; 0x43a <SEV_SEG_writeByte>
}
 52c:	08 95       	ret

0000052e <__udivmodqi4>:
 52e:	99 1b       	sub	r25, r25
 530:	79 e0       	ldi	r23, 0x09	; 9
 532:	04 c0       	rjmp	.+8      	; 0x53c <__udivmodqi4_ep>

00000534 <__udivmodqi4_loop>:
 534:	99 1f       	adc	r25, r25
 536:	96 17       	cp	r25, r22
 538:	08 f0       	brcs	.+2      	; 0x53c <__udivmodqi4_ep>
 53a:	96 1b       	sub	r25, r22

0000053c <__udivmodqi4_ep>:
 53c:	88 1f       	adc	r24, r24
 53e:	7a 95       	dec	r23
 540:	c9 f7       	brne	.-14     	; 0x534 <__udivmodqi4_loop>
 542:	80 95       	com	r24
 544:	08 95       	ret

00000546 <_exit>:
 546:	f8 94       	cli

00000548 <__stop_program>:
 548:	ff cf       	rjmp	.-2      	; 0x548 <__stop_program>
